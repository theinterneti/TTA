# =============================================================================
# TTA STAGING ENVIRONMENT CONFIGURATION (HOMELAB)
# =============================================================================
# This file contains staging environment settings for homelab deployment
# Copy this to .env.staging and customize for your staging setup
# .env.staging should be in .gitignore and never committed
#
# IMPORTANT: This staging environment uses DIFFERENT PORTS to allow
# simultaneous operation with the development environment
# =============================================================================

# =============================================================================
# ENVIRONMENT IDENTIFICATION
# =============================================================================
ENVIRONMENT=staging
CONTAINER_PREFIX=tta-staging
TTA_ENV=staging
NODE_ENV=staging
PYTHONPATH=/app

# =============================================================================
# DATABASE CONFIGURATION - STAGING (DIFFERENT PORTS FOR HOMELAB)
# =============================================================================

# PostgreSQL Configuration (Port 5433 to avoid conflict with dev)
POSTGRES_STAGING_DB=tta_staging
POSTGRES_STAGING_USER=tta_staging_user
POSTGRES_STAGING_PASSWORD=staging_postgres_secure_password_change_me
DATABASE_URL=postgresql://tta_staging_user:staging_postgres_secure_password_change_me@localhost:5433/tta_staging

# Redis Configuration (Port 6380 to avoid conflict with dev)
REDIS_URL=redis://:staging_redis_secure_password@localhost:6380
REDIS_HOST=localhost
REDIS_PORT=6380
REDIS_STAGING_PASSWORD=staging_redis_secure_password_change_me
REDIS_DB=0

# Neo4j Configuration (Ports 7475, 7688 to avoid conflict with dev)
NEO4J_URI=bolt://localhost:7688
NEO4J_URL=bolt://localhost:7688
NEO4J_USER=neo4j
NEO4J_USERNAME=neo4j
NEO4J_STAGING_PASSWORD=staging_neo4j_secure_password_change_me
NEO4J_AUTH=neo4j/staging_neo4j_secure_password_change_me
NEO4J_DATABASE=neo4j

# =============================================================================
# AI MODEL CONFIGURATION - STAGING
# =============================================================================

# OpenRouter (Staging API Key)
OPENROUTER_STAGING_API_KEY=your_staging_openrouter_api_key_here
OPENROUTER_SHOW_FREE_ONLY=false
OPENROUTER_PREFER_FREE_MODELS=false
OPENROUTER_MAX_COST_PER_TOKEN=0.001

# OpenAI (Optional - Staging)
OPENAI_API_KEY=your_staging_openai_api_key_here
OPENAI_MODEL=gpt-4o-mini
OPENAI_MAX_TOKENS=2048
OPENAI_TEMPERATURE=0.7

# Anthropic (Optional - Staging)
ANTHROPIC_API_KEY=your_staging_anthropic_api_key_here

# =============================================================================
# SECURITY CONFIGURATION - STAGING (PRODUCTION-LIKE)
# =============================================================================

# JWT Configuration (Use strong keys for staging)
JWT_STAGING_SECRET_KEY=staging_jwt_secret_key_minimum_32_chars_secure_change_me
JWT_ALGORITHM=HS256
JWT_ACCESS_TOKEN_EXPIRE_MINUTES=30
JWT_REFRESH_TOKEN_EXPIRE_DAYS=7

# Encryption Keys (Staging - Generate with: openssl rand -base64 32)
ENCRYPTION_KEY=staging_encryption_key_32_bytes_base64_encoded_change_me
FERNET_KEY=staging_fernet_key_32_bytes_base64_encoded_change_me

# =============================================================================
# API CONFIGURATION - STAGING
# =============================================================================

# API Server Settings (Port 8081 to avoid conflict with dev)
API_HOST=0.0.0.0
API_PORT=8081
API_DEBUG=false
API_RELOAD=false
API_LOG_LEVEL=INFO

# CORS Configuration (Restricted for staging)
API_CORS_ORIGINS=http://localhost:3001,http://localhost:8081,https://staging.tta-homelab.local

# Rate Limiting (Production-like for staging)
API_RATE_LIMIT_CALLS=100
API_RATE_LIMIT_PERIOD=60

# =============================================================================
# FRONTEND CONFIGURATION - STAGING
# =============================================================================

# React App Configuration (Port 3001 to avoid conflict with dev)
REACT_APP_API_URL=http://localhost:8081
REACT_APP_WS_URL=ws://localhost:8081
REACT_APP_DEBUG=false
REACT_APP_JWT_STORAGE_KEY=tta_access_token
REACT_APP_REFRESH_TOKEN_KEY=tta_refresh_token

# Vite Configuration (if using Vite)
VITE_API_BASE_URL=http://localhost:8081
VITE_WS_URL=ws://localhost:8081
VITE_ENVIRONMENT=staging

# =============================================================================
# FEATURE FLAGS
# =============================================================================

# Core Features
FEATURE_AI_NARRATIVE=true
FEATURE_LIVING_WORLDS=true
FEATURE_CRISIS_SUPPORT=true
FEATURE_REAL_TIME_MONITORING=true

# Model Management Features
FEATURE_MODEL_MANAGEMENT=true
FEATURE_LOCAL_MODELS=false
FEATURE_CLOUD_MODELS=true

# Advanced Features (Test in staging)
FEATURE_PREDICTIVE_ANALYTICS=true
FEATURE_EHR_INTEGRATION=false
FEATURE_MOBILE_APPS=false

# =============================================================================
# THERAPEUTIC CONFIGURATION
# =============================================================================

# Crisis Detection
CRISIS_DETECTION_ENABLED=true
CRISIS_HOTLINE_NUMBER=988
CRISIS_TEXT_NUMBER=741741
EMERGENCY_NUMBER=911

# Therapeutic Settings
DEFAULT_THERAPEUTIC_INTENSITY=medium
THERAPEUTIC_SAFETY_THRESHOLD=7.5
SESSION_TIMEOUT_MINUTES=45
MAX_CONCURRENT_SESSIONS=500

# =============================================================================
# MONITORING & OBSERVABILITY - STAGING
# =============================================================================

# Prometheus (Port 9091 to avoid conflict with dev)
PROMETHEUS_PORT=9091
PROMETHEUS_METRICS_ENABLED=true

# Grafana (Port 3002 to avoid conflict with dev)
GRAFANA_PORT=3002
GRAFANA_ADMIN_PASSWORD=staging_grafana_secure_password_change_me
ENABLE_GRAFANA=true

# Logging (Production-like)
LOG_LEVEL=INFO
DATABASE_LOG_LEVEL=WARNING
API_LOG_LEVEL=INFO
LOG_FORMAT=%(asctime)s - %(name)s - %(levelname)s - %(message)s
ENABLE_PERFORMANCE_MONITORING=true

# Sentry (Optional - Staging environment)
SENTRY_STAGING_DSN=your_sentry_staging_dsn_here
SENTRY_ENVIRONMENT=staging
SENTRY_TRACES_SAMPLE_RATE=0.1

# Health Check Service (Port 8090)
HEALTH_CHECK_PORT=8090
HEALTH_CHECK_INTERVAL=30
HEALTH_CHECK_TIMEOUT=10
HEALTH_CHECK_RETRIES=3

# =============================================================================
# STAGING-SPECIFIC TOOLS
# =============================================================================

# Redis Commander (Port 8082 to avoid conflict with dev)
REDIS_COMMANDER_PORT=8082
ENABLE_REDIS_COMMANDER=true

# Neo4j Browser (Port 7475 - HTTP interface)
NEO4J_BROWSER_PORT=7475

# =============================================================================
# EMAIL AND NOTIFICATIONS
# =============================================================================

# SMTP Configuration
SMTP_HOST=smtp.your-email-provider.com
SMTP_PORT=587
SMTP_USERNAME=CHANGE_ME_STAGING_SMTP_USERNAME
SMTP_PASSWORD=CHANGE_ME_STAGING_SMTP_PASSWORD
SMTP_USE_TLS=true

# Email Settings
FROM_EMAIL=noreply-staging@your-domain.com
ADMIN_EMAIL=admin-staging@your-domain.com

# =============================================================================
# BACKUP CONFIGURATION
# =============================================================================

# Backup Settings
BACKUP_ENABLED=true
BACKUP_SCHEDULE=0 3 * * *
BACKUP_RETENTION_DAYS=14

# AWS S3 Backup Configuration
AWS_ACCESS_KEY_ID=CHANGE_ME_STAGING_AWS_ACCESS_KEY
AWS_SECRET_ACCESS_KEY=CHANGE_ME_STAGING_AWS_SECRET_KEY
AWS_BACKUP_BUCKET=your-staging-backup-bucket
AWS_REGION=us-east-1

# =============================================================================
# PERFORMANCE TUNING - STAGING (PRODUCTION-LIKE)
# =============================================================================

# Concurrency settings (higher for staging)
MAX_CONCURRENT_SESSIONS=100
WORKER_PROCESSES=4
WORKER_THREADS=8

# Memory limits (staging - production-like)
NEO4J_server_memory_heap_initial__size=1G
NEO4J_server_memory_heap_max__size=4G
NEO4J_server_memory_pagecache_size=2G

# Redis memory
REDIS_MAXMEMORY=1gb
REDIS_MAXMEMORY_POLICY=allkeys-lru

# Database Connection Pooling
DB_POOL_SIZE=10
DB_MAX_OVERFLOW=20
DB_POOL_TIMEOUT=30

# Caching Configuration
CACHE_TTL_SECONDS=1800
CACHE_MAX_SIZE_MB=512

# =============================================================================
# DOCKER CONFIGURATION
# =============================================================================

# Docker Compose settings
COMPOSE_PROJECT_NAME=tta-staging
COMPOSE_FILE=docker-compose.staging-homelab.yml

# Build settings
DOCKER_BUILDKIT=1
COMPOSE_DOCKER_CLI_BUILD=1

# =============================================================================
# REPLICATION & BACKUP (STAGING)
# =============================================================================

# PostgreSQL Replication
REPLICATION_PASSWORD=staging_replication_password_change_me

# Backup settings
BACKUP_ENABLED=true
BACKUP_SCHEDULE=0 2 * * *
BACKUP_RETENTION_DAYS=7

# =============================================================================
# WSL2 OPTIMIZATION
# =============================================================================

# Ensure all paths use WSL filesystem (/dev/sdf)
# Do not write to Windows drives (/mnt/c, /mnt/d, etc.)
DATA_DIR=/home/thein/recovered-tta-storytelling/data/staging
LOGS_DIR=/home/thein/recovered-tta-storytelling/logs/staging
CACHE_DIR=/home/thein/recovered-tta-storytelling/.cache/staging

# =============================================================================
# STAGING PORT REFERENCE
# =============================================================================
# Service          | Development | Staging  | Purpose
# -----------------|-------------|----------|---------------------------
# Neo4j HTTP       | 7474        | 7475     | Browser interface
# Neo4j Bolt       | 7687        | 7688     | Database connection
# Redis            | 6379        | 6380     | Cache/session store
# PostgreSQL       | 5432        | 5433     | Relational database
# API Server       | 8080        | 8081     | Backend API
# Frontend         | 3000        | 3001     | Web interface
# Grafana          | 3000        | 3002     | Monitoring dashboard
# Prometheus       | 9090        | 9091     | Metrics collection
# Redis Commander  | 8081        | 8082     | Redis management UI
# Health Check     | N/A         | 8090     | Service health monitoring
# =============================================================================

# =============================================================================
# TESTING CONFIGURATION
# =============================================================================

# Test Database Configuration (use staging databases with test DB number)
TEST_DATABASE_URL=postgresql://tta_staging_user:staging_postgres_secure_password_change_me@localhost:5433/tta_staging_test
TEST_REDIS_URL=redis://:staging_redis_secure_password@localhost:6380/1
TEST_NEO4J_URI=bolt://localhost:7688

# Mock Services (Disable in staging for realistic testing)
MOCK_EMAIL_SERVICE=false
MOCK_SMS_SERVICE=false
MOCK_OPENAI_API=false

# =============================================================================
# HEALTHCARE COMPLIANCE
# =============================================================================

# HIPAA Configuration
HIPAA_AUDIT_ENABLED=true
HIPAA_ENCRYPTION_REQUIRED=true
HIPAA_ACCESS_LOGGING=true

# Data Retention Policies
PATIENT_DATA_RETENTION_YEARS=7
SESSION_DATA_RETENTION_MONTHS=12
AUDIT_LOG_RETENTION_YEARS=3

# =============================================================================
# NOTES - HOMELAB STAGING ENVIRONMENT
# =============================================================================
# - This is the STAGING environment (production-like) for HOMELAB
# - Use strong security settings (similar to production)
# - Disable debug features and use INFO-level logging
# - Use offset ports to avoid conflicts with development environment
# - Both dev and staging can run simultaneously on the same machine
# - Staging validates production-ready configurations in homelab
#
# Staging Environment Purpose:
# - Test production-like configurations in homelab
# - Validate new features before production deployment
# - Performance testing and load testing
# - Integration testing with all services
# - Multi-user session testing
# - Security validation
#
# Key Differences from Development:
# - Different ports (see PORT REFERENCE above)
# - Production-like security settings
# - Separate Docker volumes and networks
# - Higher resource allocation
# - Production-like monitoring and logging
#
# Key Differences from Production:
# - Runs on homelab hardware (not cloud)
# - Can run simultaneously with development
# - Test data and synthetic users
# - More permissive for testing scenarios
#
# =============================================================================
# SETUP CHECKLIST FOR HOMELAB STAGING
# =============================================================================
#
# Before starting staging environment:
# 1. ✅ Copy this file to .env.staging
# 2. ✅ Replace all placeholder passwords with secure values
# 3. ✅ Ensure development environment is not using conflicting ports
# 4. ✅ Verify WSL2 filesystem paths are correct
# 5. ✅ Set up API keys (separate from development)
# 6. ✅ Configure monitoring tools (Grafana, Prometheus)
# 7. ✅ Test database connections on staging ports
# 8. ✅ Validate Docker volumes are properly isolated
# 9. ✅ Review and adjust resource limits if needed
# 10. ✅ Test simultaneous dev + staging operation
# =============================================================================
