name: TTA Franchise World System - Deploy

on:
  push:
    branches: [main, production]
    paths:
      - "src/player_experience/franchise_worlds/**"
  pull_request:
    branches: [main]
    paths:
      - "src/player_experience/franchise_worlds/**"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_API: ${{ github.repository }}/tta-franchise-api
  IMAGE_NAME_BRIDGE: ${{ github.repository }}/tta-franchise-bridge

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      neo4j:
        image: neo4j:5.15-community
        ports:
          - 7687:7687
        env:
          NEO4J_AUTH: neo4j/testpassword
        options: >-
          --health-cmd "cypher-shell -u neo4j -p testpassword 'RETURN 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Set up Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Cache Node.js dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Python dependencies
        working-directory: src/player_experience/franchise_worlds
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r deployment/requirements-prod.txt
          pip install pytest pytest-asyncio pytest-cov

      - name: Install Node.js dependencies
        working-directory: src/player_experience/franchise_worlds/scripts
        run: |
          npm ci

      - name: Run Python tests
        working-directory: src/player_experience/franchise_worlds
        env:
          REDIS_URL: redis://localhost:6379
          NEO4J_URI: bolt://localhost:7687
          NEO4J_USER: neo4j
          NEO4J_PASSWORD: testpassword
          ENVIRONMENT: test
        run: |
          python -m pytest tests/ -v --cov=. --cov-report=xml

      - name: Run Node.js tests
        working-directory: src/player_experience/franchise_worlds
        run: |
          node test-system.js

      - name: Test bridge scripts
        working-directory: src/player_experience/franchise_worlds
        run: |
          node scripts/initialize-system.js
          node scripts/get-worlds.js
          node scripts/get-archetypes.js

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./src/player_experience/franchise_worlds/coverage.xml
          flags: unittests
          name: codecov-umbrella

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "src/player_experience/franchise_worlds"
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "trivy-results.sarif"

  build:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for API
        id: meta-api
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Extract metadata (tags, labels) for Bridge
        id: meta-bridge
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BRIDGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push API Docker image
        uses: docker/build-push-action@v5
        with:
          context: src/player_experience/franchise_worlds
          file: src/player_experience/franchise_worlds/deployment/Dockerfile.api
          push: true
          tags: ${{ steps.meta-api.outputs.tags }}
          labels: ${{ steps.meta-api.outputs.labels }}

      - name: Build and push Bridge Docker image
        uses: docker/build-push-action@v5
        with:
          context: src/player_experience/franchise_worlds
          file: src/player_experience/franchise_worlds/deployment/Dockerfile.bridge
          push: true
          tags: ${{ steps.meta-bridge.outputs.tags }}
          labels: ${{ steps.meta-bridge.outputs.labels }}

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: staging

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          # This could involve SSH to staging server, kubectl apply, etc.

  deploy-production:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/production'
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here
          # This should include health checks and rollback capabilities

      - name: Run post-deployment tests
        run: |
          echo "Running post-deployment health checks..."
          # Add health check commands here

      - name: Notify deployment success
        if: success()
        run: |
          echo "Production deployment successful!"
          # Add notification logic (Slack, email, etc.)

      - name: Rollback on failure
        if: failure()
        run: |
          echo "Deployment failed, initiating rollback..."
          # Add rollback logic here
