============================= test session starts ==============================
platform linux -- Python 3.11.12, pytest-8.4.1, pluggy-1.6.0
rootdir: /home/thein/projects/projects/TTA
configfile: pytest.ini
testpaths: tests
plugins: xdist-3.8.0, timeout-2.4.0, asyncio-1.1.0, anyio-4.10.0, rerunfailures-15.1, order-1.3.0, rich-0.2.0
asyncio: mode=Mode.STRICT, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function
collected 502 items

tests/test_api_integration.py ......Starting Player Experience Interface API...
Shutting down Player Experience Interface API...
.
tests/test_api_structure.py ...............
tests/test_character_avatar_manager.py ................
tests/test_character_management_api.py ....
tests/test_compatibility_checker.py ............
tests/test_components.py ...
tests/test_end_to_end_workflows.py .........
tests/test_enhanced_authentication.py ........................
tests/test_models_compatibility.py ..
tests/test_narrative_arc_orchestrator_component.py ..............
tests/test_narrative_coherence_engine.py ....✓ Conflict resolution mechanisms properly structured
.✓ Task 4.2 implementation methods properly defined
✓ 10 creative solution methods
✓ 5 retroactive change methods
✓ 8 convergence validation methods
.
tests/test_orchestrator.py ....
tests/test_personalization_service_manager.py ..............................
tests/test_player_experience_component_integration.py ...FF.....F...                         TTA Component Status                          
┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━┳━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━┓
┃ Component           ┃ Status  ┃ Repository    ┃ Dependencies        ┃
┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━╇━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━┩
│ carbon              │ stopped │ tta.prototype │ None                │
│ docker              │ stopped │ tta.prototype │ None                │
│ player_experience   │ stopped │ tta.prototype │ redis, neo4j        │
│ tta.dev_llm         │ stopped │ tta.dev       │ None                │
│ tta.dev_neo4j       │ stopped │ tta.dev       │ None                │
│ tta.prototype_app   │ stopped │ tta.prototype │ tta.prototype_neo4j │
│ tta.prototype_neo4j │ stopped │ tta.prototype │ None                │
└─────────────────────┴─────────┴───────────────┴─────────────────────┘
....
tests/test_player_experience_manager.py ....
tests/test_player_experience_models.py .............................
tests/test_player_experience_orchestration_integration.py .......F...........
tests/test_player_management_api.py .........................
tests/test_player_profile_database.py .................................................
tests/test_player_profile_database_param.py ssss
tests/test_player_profile_manager.py ..............................
tests/test_privacy_api.py ..........
tests/test_privacy_service.py .............................
tests/test_process_utils.py .....
tests/test_progress_tracking_service.py F.F.F........
tests/test_redis_integration.py ss
tests/test_scale_manager_extraction.py .F
tests/test_session_integration_manager_simple.py ........
tests/test_session_management.py .................
tests/test_session_narrative_integration.py ......
tests/test_session_repository_redis_integration.py s
tests/test_therapeutic_effectiveness_integration.py .
tests/test_therapeutic_profile_integration.py ..............
tests/test_therapeutic_settings.py ........................
tests/test_wave3_facades.py ..
tests/test_websocket_chat_backend.py ....
tests/test_websocket_chat_backend_task8_2.py ...
tests/test_websocket_chat_interactive.py ..
tests/test_websocket_chat_typing_and_metrics.py ..
tests/test_world_management_api.py ............
tests/test_world_management_module.py .....................

=================================== FAILURES ===================================
__ TestPlayerExperienceComponentIntegration.test_component_start_integration ___

self = <tests.test_player_experience_component_integration.TestPlayerExperienceComponentIntegration testMethod=test_component_start_integration>
mock_requests = <MagicMock name='get' id='140587678887120'>
mock_subprocess = <MagicMock name='run' id='140587678886224'>

    @patch('subprocess.run')
    @patch('requests.get')
    def test_component_start_integration(self, mock_requests, mock_subprocess):
        """Test that the component starts correctly through orchestration."""
        # Mock successful Docker Compose execution
        mock_subprocess.return_value = Mock(returncode=0, stdout="", stderr="")
    
        # Mock successful health check
        mock_health_response = Mock()
        mock_health_response.status_code = 200
        mock_health_response.json.return_value = {"status": "healthy"}
        mock_requests.return_value = mock_health_response
    
        # Test starting the component
        result = self.player_experience.start()
        self.assertTrue(result)
        self.assertEqual(self.player_experience.status, ComponentStatus.RUNNING)
    
        # Verify Docker Compose was called
>       mock_subprocess.assert_called()

tests/test_player_experience_component_integration.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='run' id='140587678886224'>

    def assert_called(self):
        """assert that the mock was called at least once
        """
        if self.call_count == 0:
            msg = ("Expected '%s' to have been called." %
                   (self._mock_name or 'mock'))
>           raise AssertionError(msg)
E           AssertionError: Expected 'run' to have been called.

../../../.local/share/uv/python/cpython-3.11.12-linux-x86_64-gnu/lib/python3.11/unittest/mock.py:908: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  src.orchestration.orchestrator:orchestrator.py:192 No components imported from tta.dev; falling back to core components
WARNING  src.orchestration.orchestrator:orchestrator.py:192 No components imported from tta.prototype; falling back to core components
___ TestPlayerExperienceComponentIntegration.test_component_stop_integration ___

self = <tests.test_player_experience_component_integration.TestPlayerExperienceComponentIntegration testMethod=test_component_stop_integration>
mock_requests = <MagicMock name='get' id='140587677867088'>
mock_subprocess = <MagicMock name='run' id='140587677872592'>

    @patch('subprocess.run')
    @patch('requests.get')
    def test_component_stop_integration(self, mock_requests, mock_subprocess):
        """Test that the component stops correctly through orchestration."""
        # First start the component (mocked)
        mock_subprocess.return_value = Mock(returncode=0, stdout="", stderr="")
        mock_health_response = Mock()
        mock_health_response.status_code = 200
        mock_requests.return_value = mock_health_response
    
        self.player_experience.start()
    
        # Mock stopping
        mock_requests.side_effect = [
            mock_health_response,  # Initial health check (running)
            Exception("Connection refused")  # After stop (not running)
        ]
    
        # Test stopping the component
        result = self.player_experience.stop()
>       self.assertTrue(result)
E       AssertionError: False is not true

tests/test_player_experience_component_integration.py:123: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  src.orchestration.orchestrator:orchestrator.py:192 No components imported from tta.dev; falling back to core components
WARNING  src.orchestration.orchestrator:orchestrator.py:192 No components imported from tta.prototype; falling back to core components
ERROR    src.components.player_experience_component:player_experience_component.py:178 Error stopping Player Experience services: Connection refused
ERROR    src.orchestration.component:component.py:157 Failed to stop component player_experience
___ TestPlayerExperienceComponentIntegration.test_error_handling_integration ___

self = <tests.test_player_experience_component_integration.TestPlayerExperienceComponentIntegration testMethod=test_error_handling_integration>

    def test_error_handling_integration(self):
        """Test error handling in component integration."""
        # Test with invalid Docker Compose path
        invalid_component = PlayerExperienceComponent(self.config)
        invalid_component.player_experience_dir = Path("/nonexistent/path")
    
        # Starting should fail gracefully
        result = invalid_component.start()
        self.assertFalse(result)
>       self.assertEqual(invalid_component.status, ComponentStatus.STOPPED)
E       AssertionError: <ComponentStatus.ERROR: 'error'> != <ComponentStatus.STOPPED: 'stopped'>

tests/test_player_experience_component_integration.py:256: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  src.orchestration.orchestrator:orchestrator.py:192 No components imported from tta.dev; falling back to core components
WARNING  src.orchestration.orchestrator:orchestrator.py:192 No components imported from tta.prototype; falling back to core components
ERROR    src.components.player_experience_component:player_experience_component.py:107 Failed to start Player Experience services: [Errno 2] No such file or directory: '/nonexistent/path'
ERROR    src.orchestration.component:component.py:118 Failed to start component player_experience
__ TestPlayerExperienceOrchestrationIntegration.test_orchestrator_integration __

self = <tests.test_player_experience_orchestration_integration.TestPlayerExperienceOrchestrationIntegration object at 0x7fdd204bd590>
mock_validate = <MagicMock name='_validate_repositories' id='140587704493392'>
mock_import_repo = <MagicMock name='_import_repository_components' id='140587704325520'>
mock_import_core = <MagicMock name='_import_core_components' id='140587704372304'>
mock_config = <MagicMock name='TTAConfig()' spec='function' id='140587677147216'>

    @patch('src.orchestration.orchestrator.TTAOrchestrator._import_core_components')
    @patch('src.orchestration.orchestrator.TTAOrchestrator._import_repository_components')
    @patch('src.orchestration.orchestrator.TTAOrchestrator._validate_repositories')
    def test_orchestrator_integration(self, mock_validate, mock_import_repo, mock_import_core, mock_config):
        """Test that the orchestrator properly integrates the player experience component."""
        # Mock the import methods to avoid actual file system operations
        mock_validate.return_value = None
        mock_import_repo.return_value = None
    
        # Create a mock component for the orchestrator to find
        mock_component = Mock(spec=PlayerExperienceComponent)
        mock_component.name = "player_experience"
        mock_component.dependencies = ["redis", "neo4j"]
        mock_component.status = ComponentStatus.STOPPED
    
        def mock_import_core_side_effect(orchestrator_self):
            orchestrator_self.components["player_experience"] = mock_component
    
        mock_import_core.side_effect = mock_import_core_side_effect
    
        # Create orchestrator with mock config
        with patch('src.orchestration.orchestrator.TTAConfig') as mock_config_class:
            mock_config_class.return_value = mock_config
>           orchestrator = TTAOrchestrator()
                           ^^^^^^^^^^^^^^^^^

tests/test_player_experience_orchestration_integration.py:201: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/orchestration/orchestrator.py:89: in __init__
    self._import_components()
src/orchestration/decorators.py:36: in wrapper
    result = func(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^
src/orchestration/decorators.py:59: in wrapper
    result = func(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^
src/orchestration/orchestrator.py:126: in _import_components
    self._import_core_components()
../../../.local/share/uv/python/cpython-3.11.12-linux-x86_64-gnu/lib/python3.11/unittest/mock.py:1124: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../../.local/share/uv/python/cpython-3.11.12-linux-x86_64-gnu/lib/python3.11/unittest/mock.py:1128: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='_import_core_components' id='140587704372304'>
args = (), kwargs = {}
effect = <function TestPlayerExperienceOrchestrationIntegration.test_orchestrator_integration.<locals>.mock_import_core_side_effect at 0x7fdd1e6de520>

    def _execute_mock_call(self, /, *args, **kwargs):
        # separate from _increment_mock_call so that awaited functions are
        # executed separately from their call, also AsyncMock overrides this method
    
        effect = self.side_effect
        if effect is not None:
            if _is_exception(effect):
                raise effect
            elif not _callable(effect):
                result = next(effect)
                if _is_exception(result):
                    raise result
            else:
>               result = effect(*args, **kwargs)
                         ^^^^^^^^^^^^^^^^^^^^^^^
E               TypeError: TestPlayerExperienceOrchestrationIntegration.test_orchestrator_integration.<locals>.mock_import_core_side_effect() missing 1 required positional argument: 'orchestrator_self'

../../../.local/share/uv/python/cpython-3.11.12-linux-x86_64-gnu/lib/python3.11/unittest/mock.py:1189: TypeError
------------------------------ Captured log call -------------------------------
ERROR    src.orchestration.decorators:decorators.py:40 Exception in _import_components: TestPlayerExperienceOrchestrationIntegration.test_orchestrator_integration.<locals>.mock_import_core_side_effect() missing 1 required positional argument: 'orchestrator_self'
______ TestProgressTrackingService.test_comprehensive_milestone_detection ______

self = <tests.test_progress_tracking_service.TestProgressTrackingService testMethod=test_comprehensive_milestone_detection>

    def test_comprehensive_milestone_detection(self):
        async def run():
            # Create session summaries for streak detection
            now = datetime.utcnow()
            streak_summaries = []
            for i in range(10):  # 10 consecutive days
                start = now - timedelta(days=i, hours=1)
                end = now - timedelta(days=i)
                streak_summaries.append(
                    SessionSummary(
                        session_id=f"streak_s{i}",
                        character_name="Char",
                        world_name="World",
                        start_time=start,
                        end_time=end,
                        duration_minutes=25,
                        status=SessionStatus.COMPLETED,
                        progress_markers_count=1,
                        therapeutic_interventions_count=2,
                    )
                )
    
            # Update mock repository with streak data
            self.repo._summaries = streak_summaries
    
            milestones, highlights = await self.service.detect_and_update_milestones(self.player_id)
    
            # Should detect multiple milestones for 7+ day streak
            milestone_titles = [m.title for m in milestones]
            self.assertTrue(any("7" in title for title in milestone_titles))
    
            # Should have celebration highlights
            self.assertGreater(len(highlights), 0)
            highlight_types = [h.highlight_type for h in highlights]
            self.assertIn("milestone", highlight_types)
    
>       asyncio.run(run())

tests/test_progress_tracking_service.py:217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../.local/share/uv/python/cpython-3.11.12-linux-x86_64-gnu/lib/python3.11/asyncio/runners.py:190: in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
../../../.local/share/uv/python/cpython-3.11.12-linux-x86_64-gnu/lib/python3.11/asyncio/runners.py:118: in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../../.local/share/uv/python/cpython-3.11.12-linux-x86_64-gnu/lib/python3.11/asyncio/base_events.py:654: in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
tests/test_progress_tracking_service.py:210: in run
    self.assertTrue(any("7" in title for title in milestone_titles))
E   AssertionError: False is not true
________ TestProgressTrackingService.test_detect_and_update_milestones _________

self = <tests.test_progress_tracking_service.TestProgressTrackingService testMethod=test_detect_and_update_milestones>

    def test_detect_and_update_milestones(self):
        async def run():
            milestones, highlights = await self.service.detect_and_update_milestones(self.player_id)
            # Skill milestone should trigger
            titles = [m.title for m in milestones]
            self.assertIn("Skill Builder Level 1", titles)
            self.assertGreater(len(highlights), 0)
>       asyncio.run(run())

tests/test_progress_tracking_service.py:86: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../.local/share/uv/python/cpython-3.11.12-linux-x86_64-gnu/lib/python3.11/asyncio/runners.py:190: in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
../../../.local/share/uv/python/cpython-3.11.12-linux-x86_64-gnu/lib/python3.11/asyncio/runners.py:118: in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../../.local/share/uv/python/cpython-3.11.12-linux-x86_64-gnu/lib/python3.11/asyncio/base_events.py:654: in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
tests/test_progress_tracking_service.py:85: in run
    self.assertGreater(len(highlights), 0)
E   AssertionError: 0 not greater than 0
____ TestProgressTrackingService.test_enhanced_progress_insights_generation ____

self = <tests.test_progress_tracking_service.TestProgressTrackingService testMethod=test_enhanced_progress_insights_generation>

    def test_enhanced_progress_insights_generation(self):
        async def run():
            # Create a scenario with high therapeutic momentum
            high_momentum_summaries = []
            now = datetime.utcnow()
            for i in range(15):  # 15 sessions
                start = now - timedelta(days=i, hours=1)
                end = now - timedelta(days=i)
                high_momentum_summaries.append(
                    SessionSummary(
                        session_id=f"momentum_s{i}",
                        character_name="Char",
                        world_name="World",
                        start_time=start,
                        end_time=end,
                        duration_minutes=35,  # Longer sessions
                        status=SessionStatus.COMPLETED,
                        progress_markers_count=2,
                        therapeutic_interventions_count=3,
                    )
                )
    
            self.repo._summaries = high_momentum_summaries
    
            insights = await self.service.generate_progress_insights(self.player_id)
    
            # Should generate multiple relevant recommendations
            self.assertGreater(len(insights), 0)
            self.assertLessEqual(len(insights), 6)  # Should limit to top 6
    
            # Recommendations should be sorted by priority
            priorities = [rec.priority for rec in insights]
            self.assertEqual(priorities, sorted(priorities))
    
            # Should include diverse recommendation types
            rec_types = [rec.recommendation_type for rec in insights]
            self.assertGreater(len(set(rec_types)), 1)  # Multiple types
    
>       asyncio.run(run())

tests/test_progress_tracking_service.py:257: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../.local/share/uv/python/cpython-3.11.12-linux-x86_64-gnu/lib/python3.11/asyncio/runners.py:190: in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
../../../.local/share/uv/python/cpython-3.11.12-linux-x86_64-gnu/lib/python3.11/asyncio/runners.py:118: in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../../.local/share/uv/python/cpython-3.11.12-linux-x86_64-gnu/lib/python3.11/asyncio/base_events.py:654: in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
tests/test_progress_tracking_service.py:255: in run
    self.assertGreater(len(set(rec_types)), 1)  # Multiple types
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AssertionError: 1 not greater than 1
__________ test_scale_manager_creates_event_when_magnitude_threshold ___________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fdd1e800090>

    def test_scale_manager_creates_event_when_magnitude_threshold(monkeypatch):
        sm = ScaleManager(config={})
        choice = PlayerChoice(choice_id="c2", session_id="s1", choice_text="Test", metadata={})
    
        async def fake_assess(choice, scale):
            from src.components.narrative_arc_orchestrator.models import ImpactAssessment
            return ImpactAssessment(scale=scale, magnitude=0.9)
    
        monkeypatch.setattr(sm, "_assess_scale_impact", fake_assess)
    
        import asyncio
    
        events_before = len(sm.get_active_events())
>       asyncio.get_event_loop().run_until_complete(
        ^^^^^^^^^^^^^^^^^^^^^^^^
            sm.evaluate_choice_impact(choice, [NarrativeScale.SHORT_TERM])
        )

tests/test_scale_manager_extraction.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x7fdd21169850>

    def get_event_loop(self):
        """Get the event loop for the current context.
    
        Returns an instance of EventLoop or raises an exception.
        """
        if (self._local._loop is None and
                not self._local._set_called and
                threading.current_thread() is threading.main_thread()):
            self.set_event_loop(self.new_event_loop())
    
        if self._local._loop is None:
>           raise RuntimeError('There is no current event loop in thread %r.'
                               % threading.current_thread().name)
E           RuntimeError: There is no current event loop in thread 'MainThread'.

../../../.local/share/uv/python/cpython-3.11.12-linux-x86_64-gnu/lib/python3.11/asyncio/events.py:681: RuntimeError
=========================== short test summary info ============================
FAILED tests/test_player_experience_component_integration.py::TestPlayerExperienceComponentIntegration::test_component_start_integration
FAILED tests/test_player_experience_component_integration.py::TestPlayerExperienceComponentIntegration::test_component_stop_integration
FAILED tests/test_player_experience_component_integration.py::TestPlayerExperienceComponentIntegration::test_error_handling_integration
FAILED tests/test_player_experience_orchestration_integration.py::TestPlayerExperienceOrchestrationIntegration::test_orchestrator_integration
FAILED tests/test_progress_tracking_service.py::TestProgressTrackingService::test_comprehensive_milestone_detection
FAILED tests/test_progress_tracking_service.py::TestProgressTrackingService::test_detect_and_update_milestones
FAILED tests/test_progress_tracking_service.py::TestProgressTrackingService::test_enhanced_progress_insights_generation
FAILED tests/test_scale_manager_extraction.py::test_scale_manager_creates_event_when_magnitude_threshold
============ 8 failed, 487 passed, 7 skipped, 40 warnings in 13.97s ============
