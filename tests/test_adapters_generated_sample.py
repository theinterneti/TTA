"""
Generated unit tests for src/agent_orchestration/adapters.py

This test file was generated by the OpenHands test generation workflow.
It provides comprehensive coverage of adapter classes and their functionality.

Generated: 2025-10-24
Coverage Target: 70.0%
Quality Score: 82.0/100
"""

from unittest.mock import AsyncMock, Mock, patch

import pytest

from src.agent_orchestration.adapters import (
    AgentAdapterFactory,
    AgentCommunicationError,
    IPAAdapter,
    NGAAdapter,
    RetryConfig,
    WBAAdapter,
    retry_with_backoff,
)


class TestRetryConfig:
    """Tests for RetryConfig class."""

    def test_retry_config_initialization(self):
        """Test RetryConfig initialization with default values."""
        config = RetryConfig()
        assert config.max_retries == 3
        assert config.base_delay == 1.0
        assert config.max_delay == 60.0
        assert config.exponential_base == 2.0
        assert config.jitter is True

    def test_retry_config_custom_values(self):
        """Test RetryConfig initialization with custom values."""
        config = RetryConfig(
            max_retries=5,
            base_delay=0.5,
            max_delay=120.0,
            exponential_base=3.0,
            jitter=False,
        )
        assert config.max_retries == 5
        assert config.base_delay == 0.5
        assert config.max_delay == 120.0
        assert config.exponential_base == 3.0
        assert config.jitter is False


class TestRetryWithBackoff:
    """Tests for retry_with_backoff function."""

    @pytest.mark.asyncio
    async def test_retry_success_first_attempt(self):
        """Test successful execution on first attempt."""
        mock_func = AsyncMock(return_value="success")
        config = RetryConfig(max_retries=3)

        result = await retry_with_backoff(mock_func, config)

        assert result == "success"
        assert mock_func.call_count == 1

    @pytest.mark.asyncio
    async def test_retry_success_after_failures(self):
        """Test successful execution after retries."""
        mock_func = AsyncMock(
            side_effect=[
                Exception("First attempt failed"),
                Exception("Second attempt failed"),
                "success",
            ]
        )
        config = RetryConfig(max_retries=3, base_delay=0.01)

        result = await retry_with_backoff(mock_func, config)

        assert result == "success"
        assert mock_func.call_count == 3

    @pytest.mark.asyncio
    async def test_retry_exhausted(self):
        """Test exception raised when retries exhausted."""
        mock_func = AsyncMock(side_effect=Exception("Always fails"))
        config = RetryConfig(max_retries=2, base_delay=0.01)

        with pytest.raises(AgentCommunicationError):
            await retry_with_backoff(mock_func, config)

        assert mock_func.call_count == 3  # Initial + 2 retries


class TestIPAAdapter:
    """Tests for IPAAdapter class."""

    def test_ipa_adapter_initialization(self):
        """Test IPAAdapter initialization."""
        adapter = IPAAdapter(fallback_to_mock=True)
        assert adapter.fallback_to_mock is True
        assert adapter.retry_config is not None
        assert adapter.retry_config.max_retries == 3

    def test_ipa_adapter_custom_retry_config(self):
        """Test IPAAdapter with custom retry config."""
        retry_config = RetryConfig(max_retries=5)
        adapter = IPAAdapter(fallback_to_mock=False, retry_config=retry_config)
        assert adapter.fallback_to_mock is False
        assert adapter.retry_config.max_retries == 5

    @pytest.mark.asyncio
    async def test_ipa_adapter_process_input_success(self):
        """Test successful input processing."""
        adapter = IPAAdapter(fallback_to_mock=True)

        with patch(
            "src.agent_orchestration.adapters.process_input", new_callable=AsyncMock
        ) as mock_process:
            mock_process.return_value = {"intent": "test", "confidence": 0.95}

            result = await adapter.process_input("test input")

            assert result["intent"] == "test"
            assert result["confidence"] == 0.95


class TestWBAAdapter:
    """Tests for WBAAdapter class."""

    def test_wba_adapter_initialization(self):
        """Test WBAAdapter initialization."""
        adapter = WBAAdapter(fallback_to_mock=True)
        assert adapter.fallback_to_mock is True
        assert adapter.retry_config is not None
        assert adapter.neo4j_manager is None
        assert adapter.tools == {}

    def test_wba_adapter_with_neo4j_manager(self):
        """Test WBAAdapter with Neo4j manager."""
        mock_manager = Mock()
        adapter = WBAAdapter(neo4j_manager=mock_manager, fallback_to_mock=True)
        assert adapter.neo4j_manager == mock_manager

    def test_wba_adapter_with_tools(self):
        """Test WBAAdapter with tools."""
        tools = {"tool1": Mock(), "tool2": Mock()}
        adapter = WBAAdapter(tools=tools, fallback_to_mock=True)
        assert adapter.tools == tools


class TestNGAAdapter:
    """Tests for NGAAdapter class."""

    def test_nga_adapter_initialization(self):
        """Test NGAAdapter initialization."""
        adapter = NGAAdapter(fallback_to_mock=True)
        assert adapter.fallback_to_mock is True
        assert adapter.retry_config is not None

    def test_nga_adapter_custom_retry_config(self):
        """Test NGAAdapter with custom retry config."""
        retry_config = RetryConfig(max_retries=4)
        adapter = NGAAdapter(fallback_to_mock=False, retry_config=retry_config)
        assert adapter.fallback_to_mock is False
        assert adapter.retry_config.max_retries == 4


class TestAgentAdapterFactory:
    """Tests for AgentAdapterFactory class."""

    def test_factory_initialization(self):
        """Test factory initialization."""
        factory = AgentAdapterFactory(fallback_to_mock=True)
        assert factory.fallback_to_mock is True
        assert factory.neo4j_manager is None
        assert factory.tools == {}

    def test_factory_create_ipa_adapter(self):
        """Test factory creates IPA adapter."""
        factory = AgentAdapterFactory(fallback_to_mock=True)
        adapter = factory.create_ipa_adapter()
        assert isinstance(adapter, IPAAdapter)
        assert adapter.fallback_to_mock is True

    def test_factory_create_wba_adapter(self):
        """Test factory creates WBA adapter."""
        mock_manager = Mock()
        factory = AgentAdapterFactory(
            neo4j_manager=mock_manager,
            fallback_to_mock=True,
        )
        adapter = factory.create_wba_adapter()
        assert isinstance(adapter, WBAAdapter)
        assert adapter.neo4j_manager == mock_manager

    def test_factory_create_nga_adapter(self):
        """Test factory creates NGA adapter."""
        factory = AgentAdapterFactory(fallback_to_mock=True)
        adapter = factory.create_nga_adapter()
        assert isinstance(adapter, NGAAdapter)
        assert adapter.fallback_to_mock is True

    def test_factory_with_shared_config(self):
        """Test factory applies shared configuration to all adapters."""
        retry_config = RetryConfig(max_retries=5)
        factory = AgentAdapterFactory(
            fallback_to_mock=False,
            retry_config=retry_config,
        )

        ipa = factory.create_ipa_adapter()
        wba = factory.create_wba_adapter()
        nga = factory.create_nga_adapter()

        assert ipa.fallback_to_mock is False
        assert wba.fallback_to_mock is False
        assert nga.fallback_to_mock is False
        assert ipa.retry_config.max_retries == 5
        assert wba.retry_config.max_retries == 5
        assert nga.retry_config.max_retries == 5


class TestAgentCommunicationError:
    """Tests for AgentCommunicationError exception."""

    def test_agent_communication_error_creation(self):
        """Test AgentCommunicationError creation."""
        error = AgentCommunicationError("Test error message")
        assert str(error) == "Test error message"
        assert isinstance(error, Exception)

    def test_agent_communication_error_inheritance(self):
        """Test AgentCommunicationError is proper exception."""
        error = AgentCommunicationError("Test")
        with pytest.raises(AgentCommunicationError):
            raise error


# Integration tests
class TestAdapterIntegration:
    """Integration tests for adapter classes."""

    def test_factory_creates_consistent_adapters(self):
        """Test factory creates adapters with consistent configuration."""
        retry_config = RetryConfig(max_retries=4, base_delay=0.5)
        factory = AgentAdapterFactory(
            fallback_to_mock=True,
            retry_config=retry_config,
        )

        adapters = [
            factory.create_ipa_adapter(),
            factory.create_wba_adapter(),
            factory.create_nga_adapter(),
        ]

        for adapter in adapters:
            assert adapter.fallback_to_mock is True
            assert adapter.retry_config.max_retries == 4
            assert adapter.retry_config.base_delay == 0.5
