PERF401 Use `list.extend` to create a transformed list
  --> src/components/narrative_arc_orchestrator/causal_graph.py:18:17
   |
16 |         for dst in dsts:
17 |             if dst in graph and src in graph[dst]:
18 |                 issues.append(f"Cycle between {src} and {dst}")
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
19 |     return issues
   |
help: Replace for loop with list.extend

ARG001 Unused function argument: `all_events`
  --> src/components/narrative_arc_orchestrator/conflict_detection.py:11:31
   |
11 | def detect_temporal_conflicts(all_events: list[NarrativeEvent]) -> list[ScaleConflict]:
   |                               ^^^^^^^^^^
12 |     # Placeholder: real logic could compare timestamps and sequences across scales
13 |     return []
   |

ARG001 Unused function argument: `all_events`
  --> src/components/narrative_arc_orchestrator/conflict_detection.py:16:32
   |
16 | def detect_character_conflicts(all_events: list[NarrativeEvent]) -> list[ScaleConflict]:
   |                                ^^^^^^^^^^
17 |     # Placeholder: real logic would group by character and analyze trajectories
18 |     return []
   |

ARG001 Unused function argument: `all_events`
  --> src/components/narrative_arc_orchestrator/conflict_detection.py:21:31
   |
21 | def detect_thematic_conflicts(all_events: list[NarrativeEvent]) -> list[ScaleConflict]:
   |                               ^^^^^^^^^^
22 |     # Placeholder: real logic would inspect metadata/themes
23 |     return []
   |

ARG001 Unused function argument: `all_events`
  --> src/components/narrative_arc_orchestrator/conflict_detection.py:27:5
   |
26 | def detect_therapeutic_conflicts(
27 |     all_events: list[NarrativeEvent],
   |     ^^^^^^^^^^
28 | ) -> list[ScaleConflict]:
29 |     return []
   |

SIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`
  --> src/components/narrative_arc_orchestrator/impact_analysis.py:63:9
   |
61 |           strength *= 1.2
62 |       if "risk_level" in choice.metadata:
63 | /         try:
64 | |             strength *= 1.1 + 0.1 * min(
65 | |                 1.0, max(0.0, float(choice.metadata["risk_level"]))
66 | |             )
67 | |         except Exception:
68 | |             pass
   | |________________^
69 |       if scale == NarrativeScale.SHORT_TERM:
70 |           strength *= 1.3
   |
help: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`

S110 `try`-`except`-`pass` detected, consider logging the exception
  --> src/components/narrative_arc_orchestrator/impact_analysis.py:67:9
   |
65 |                   1.0, max(0.0, float(choice.metadata["risk_level"]))
66 |               )
67 | /         except Exception:
68 | |             pass
   | |________________^
69 |       if scale == NarrativeScale.SHORT_TERM:
70 |           strength *= 1.3
   |

ARG001 Unused function argument: `scale`
  --> src/components/narrative_arc_orchestrator/impact_analysis.py:93:54
   |
93 | def calculate_confidence_score(choice: PlayerChoice, scale: NarrativeScale) -> float:
   |                                                      ^^^^^
94 |     confidence = 0.5
95 |     if "evidence" in choice.metadata:
   |

SIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`
   --> src/components/narrative_arc_orchestrator/impact_analysis.py:98:9
    |
 96 |           confidence *= 1.2
 97 |       if "ambiguity" in choice.metadata:
 98 | /         try:
 99 | |             confidence *= (
100 | |                 1.0 - min(1.0, max(0.0, float(choice.metadata["ambiguity"]))) * 0.5
101 | |             )
102 | |         except Exception:
103 | |             pass
    | |________________^
104 |       return min(1.0, max(0.0, confidence))
    |
help: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`

S110 `try`-`except`-`pass` detected, consider logging the exception
   --> src/components/narrative_arc_orchestrator/impact_analysis.py:102:9
    |
100 |                   1.0 - min(1.0, max(0.0, float(choice.metadata["ambiguity"]))) * 0.5
101 |               )
102 | /         except Exception:
103 | |             pass
    | |________________^
104 |       return min(1.0, max(0.0, confidence))
    |

PLC0206 Extracting value from dictionary without calling `.items()`
   --> src/components/narrative_arc_orchestrator/impact_analysis.py:141:13
    |
139 |       for scale, assessment in assessments.items():
140 |           if assessment.magnitude > 0.6:
141 | /             for other in active_events:
142 | |                 if other != scale:
143 | |                     for ev in active_events[other]:
144 | |                         ev.causal_links.setdefault("cross_scale", 0.0)
145 | |                         ev.causal_links["cross_scale"] = max(
146 | |                             ev.causal_links["cross_scale"], 0.2
147 | |                         )
    | |_________________________^
    |

ARG001 Unused function argument: `resolution`
  --> src/components/narrative_arc_orchestrator/resolution_engine.py:25:22
   |
25 | def apply_resolution(resolution: Resolution) -> None:
   |                      ^^^^^^^^^^
26 |     # Placeholder for applying the resolution in the system
27 |     return None
   |

S110 `try`-`except`-`pass` detected, consider logging the exception
  --> src/components/narrative_arc_orchestrator/scale_manager.py:58:1
   |
56 |       if not isinstance(current_policy, _RobustEventLoopPolicy):
57 |           asyncio.set_event_loop_policy(_RobustEventLoopPolicy())
58 | / except Exception:
59 | |     # If setting a policy fails, silently continue; tests that use asyncio.run(...) will manage loops
60 | |     pass
   | |________^
   |

Found 13 errors.
No fixes available (2 hidden fixes can be enabled with the `--unsafe-fixes` option).
