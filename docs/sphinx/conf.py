# Configuration file for the Sphinx documentation builder.
#
# For the full list of built-in configuration values, see the documentation:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

import os
import sys
from pathlib import Path

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.

# Add the project root to the Python path
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root / "src"))

# -- Project information -----------------------------------------------------

project = "TTA - Therapeutic Text Adventure"
copyright = "2025, TTA Development Team"
author = "TTA Development Team"
release = "0.1.0"
version = "0.1.0"

# -- General configuration ---------------------------------------------------

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    "sphinx.ext.autodoc",
    "sphinx.ext.autosummary",
    "sphinx.ext.viewcode",
    "sphinx.ext.napoleon",
    "sphinx.ext.intersphinx",
    "sphinx.ext.todo",
    "sphinx.ext.coverage",
    "sphinx.ext.ifconfig",
    "sphinx.ext.githubpages",
    "sphinx_autodoc_typehints",
    "sphinx_copybutton",
    "sphinxcontrib.mermaid",
    "myst_parser",
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates"]

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = ["_build", "Thumbs.db", ".DS_Store"]

# The suffix(es) of source filenames.
source_suffix = {
    ".rst": None,
    ".md": "myst_parser",
}

# The master toctree document.
master_doc = "index"

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
language = "en"

# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = "sphinx_rtd_theme"

# Theme options are theme-specific and customize the look and feel of a theme
# further.  See the documentation for a list of options available for each theme.
html_theme_options = {
    "canonical_url": "",
    "analytics_id": "",
    "logo_only": False,
    "display_version": True,
    "prev_next_buttons_location": "bottom",
    "style_external_links": False,
    "vcs_pageview_mode": "",
    "style_nav_header_background": "#2980B9",
    # Toc options
    "collapse_navigation": True,
    "sticky_navigation": True,
    "navigation_depth": 4,
    "includehidden": True,
    "titles_only": False,
}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ["_static"]

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
html_sidebars = {
    "**": [
        "relations.html",  # needs 'show_related': True theme option to display
        "searchbox.html",
    ]
}

# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = "TTAdoc"

# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    "papersize": "letterpaper",
    # The font size ('10pt', '11pt' or '12pt').
    "pointsize": "10pt",
    # Additional stuff for the LaTeX preamble.
    "preamble": "",
    # Latex figure (float) alignment
    "figure_align": "htbp",
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, "TTA.tex", "TTA Documentation", "TTA Development Team", "manual"),
]

# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [(master_doc, "tta", "TTA Documentation", [author], 1)]

# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (
        master_doc,
        "TTA",
        "TTA Documentation",
        author,
        "TTA",
        "Therapeutic Text Adventure Platform",
        "Miscellaneous",
    ),
]

# -- Extension configuration -------------------------------------------------

# -- Options for autodoc extension -------------------------------------------

# This value selects what content will be inserted into the main body of an autoclass directive.
autoclass_content = "both"

# This value is a list of autodoc directive flags that should be automatically applied to all autodoc directives.
autodoc_default_flags = ["members", "undoc-members", "show-inheritance"]

# This value controls the docstrings inheritance.
autodoc_inherit_docstrings = True

# This value controls the behavior of sphinx.ext.autodoc-typehints.
autodoc_typehints = "description"

# -- Options for autosummary extension ---------------------------------------

# Boolean indicating whether to scan all found documents for autosummary directives,
# and to generate stub pages for each.
autosummary_generate = True

# -- Options for napoleon extension ------------------------------------------

# True to parse NumPy style docstrings. False to disable NumPy style docstrings.
napoleon_numpy_docstring = True

# True to parse Google style docstrings. False to disable Google style docstrings.
napoleon_google_docstring = True

# True to include private members (like _membername) with docstrings in the documentation.
napoleon_include_private_with_doc = False

# True to include special members (like __membername__) with docstrings in the documentation.
napoleon_include_special_with_doc = True

# -- Options for intersphinx extension ---------------------------------------

# This config value contains the locations and names of other projects that should be linked to in this documentation.
intersphinx_mapping = {
    "python": ("https://docs.python.org/3", None),
    "fastapi": ("https://fastapi.tiangolo.com", None),
    "pydantic": ("https://docs.pydantic.dev/latest/", None),
    "neo4j": ("https://neo4j.com/docs/api/python-driver/current/", None),
    "redis": ("https://redis-py.readthedocs.io/en/stable/", None),
}

# -- Options for todo extension ----------------------------------------------

# If this is True, todo and todolist produce output, else they produce nothing.
todo_include_todos = True

# -- Options for sphinx_autodoc_typehints ------------------------------------

# Always document param types (even if the parameter has no description)
always_document_param_types = True

# Simplify optional unions
simplify_optional_unions = True

# -- Options for sphinx_copybutton -------------------------------------------

# Exclude prompts from being copied
copybutton_prompt_text = r">>> |\.\.\. |\$ |In \[\d*\]: | {2,5}\.\.\.: | {5,8}: "
copybutton_prompt_is_regexp = True

# -- Options for myst_parser ----------------------------------------------

# Enable specific MyST extensions
myst_enable_extensions = [
    "amsmath",
    "colon_fence",
    "deflist",
    "dollarmath",
    "fieldlist",
    "html_admonition",
    "html_image",
    "linkify",
    "replacements",
    "smartquotes",
    "strikethrough",
    "substitution",
    "tasklist",
]

# -- Options for mermaid -----------------------------------------------------

# Mermaid configuration
mermaid_version = "latest"
mermaid_init_js = "mermaid.initialize({startOnLoad:true});"

# -- Custom configuration ----------------------------------------------------


# Add custom CSS
def setup(app):
    """Custom setup function."""
    app.add_css_file("custom.css")

    # Add custom JavaScript if needed
    # app.add_js_file('custom.js')


# Suppress warnings for missing references during development
suppress_warnings = ["ref.citation"]

# -- API Documentation Configuration -----------------------------------------


# Automatically generate API documentation
def run_apidoc(_):
    """Generate API documentation using sphinx-apidoc."""

    from sphinx.ext.apidoc import main

    # Path to the source code
    source_path = os.path.join(os.path.dirname(__file__), "..", "..", "src")

    # Path to output the generated .rst files
    output_path = os.path.join(os.path.dirname(__file__), "api")

    # Ensure output directory exists
    os.makedirs(output_path, exist_ok=True)

    # Run sphinx-apidoc with comprehensive options
    main(
        [
            "--force",  # Overwrite existing files
            "--separate",  # Create separate files for each module
            "--module-first",  # Put module documentation before submodule documentation
            "--maxdepth",
            "6",  # Maximum depth for submodules
            "--tocfile",
            "modules",  # Name of the TOC file
            "-o",
            output_path,  # Output directory
            source_path,  # Source directory
            # Exclude patterns
            "*/tests/*",
            "*/test_*",
            "*/*_test.py",
            "*/conftest.py",
            "*/migrations/*",
            "*/__pycache__/*",
            "*/.*",  # Hidden files
            "*/venv/*",
            "*/.venv/*",
        ]
    )


def setup_apidoc(app, config):
    """Setup function to run apidoc."""
    run_apidoc(None)


# Enhanced autodoc configuration
def autodoc_skip_member(app, what, name, obj, skip, options):
    """Custom function to skip certain members in autodoc."""
    # Skip private methods starting with underscore (except __init__)
    if name.startswith("_") and name not in (
        "__init__",
        "__call__",
        "__enter__",
        "__exit__",
    ):
        return True

    # Skip test methods
    if name.startswith("test_"):
        return True

    # Skip certain common methods that add noise
    if name in ("model_config", "model_fields", "model_computed_fields"):
        return True

    return skip


def autodoc_process_docstring(app, what, name, obj, options, lines):
    """Process docstrings to enhance formatting."""
    # Add type information if missing
    if what in ("method", "function") and hasattr(obj, "__annotations__"):
        annotations = getattr(obj, "__annotations__", {})
        if annotations and not any(
            "Args:" in line or "Parameters:" in line for line in lines
        ):
            # Add basic parameter documentation if missing
            if lines and not lines[0].strip():
                lines.pop(0)  # Remove empty first line

            # Add a separator before existing content if it exists
            if lines:
                lines.insert(0, "")

    # Ensure proper formatting for code blocks
    for i, line in enumerate(lines):
        # Convert simple code references to proper rst format
        if "`" in line and not line.strip().startswith(".. "):
            # This is a simple enhancement - more sophisticated processing could be added
            pass


# Connect the setup function
def setup(app):
    """Setup function for Sphinx."""
    app.connect("config-inited", setup_apidoc)
    app.connect("autodoc-skip-member", autodoc_skip_member)
    app.connect("autodoc-process-docstring", autodoc_process_docstring)
    app.add_css_file("custom.css")
