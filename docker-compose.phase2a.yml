version: '3.8'

services:
  # Shared Components Service
  shared-components:
    build:
      context: ./web-interfaces/shared
      dockerfile: Dockerfile
    container_name: tta-shared-components
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=development
      - VITE_API_BASE_URL=http://localhost:8000
    volumes:
      - ./web-interfaces/shared:/app
      - /app/node_modules
    networks:
      - tta-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Patient Interface Service
  patient-interface:
    build:
      context: ./web-interfaces/patient-interface
      dockerfile: Dockerfile
    container_name: tta-patient-interface
    ports:
      - "3002:3000"
    environment:
      - NODE_ENV=development
      - VITE_API_BASE_URL=http://localhost:8000
      - VITE_SHARED_COMPONENTS_URL=http://localhost:3001
      - VITE_FEATURE_AI_NARRATIVE=true
      - VITE_FEATURE_LIVING_WORLDS=true
      - VITE_FEATURE_CRISIS_SUPPORT=true
    volumes:
      - ./web-interfaces/patient-interface:/app
      - /app/node_modules
    depends_on:
      - shared-components
      - patient-api
    networks:
      - tta-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Clinical Dashboard Service
  clinical-dashboard:
    build:
      context: ./web-interfaces/clinical-dashboard
      dockerfile: Dockerfile
    container_name: tta-clinical-dashboard
    ports:
      - "3003:3000"
    environment:
      - NODE_ENV=development
      - VITE_API_BASE_URL=http://localhost:8000
      - VITE_SHARED_COMPONENTS_URL=http://localhost:3001
      - VITE_FEATURE_REAL_TIME_MONITORING=true
      - VITE_FEATURE_CRISIS_ALERTS=true
    volumes:
      - ./web-interfaces/clinical-dashboard:/app
      - /app/node_modules
    depends_on:
      - shared-components
      - clinical-api
    networks:
      - tta-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Developer Interface Service
  developer-interface:
    build:
      context: ./web-interfaces/developer-interface
      dockerfile: Dockerfile
    container_name: tta-developer-interface
    ports:
      - "3004:3000"
    environment:
      - NODE_ENV=development
      - VITE_API_BASE_URL=http://localhost:8000
      - VITE_SHARED_COMPONENTS_URL=http://localhost:3001
    volumes:
      - ./web-interfaces/developer-interface:/app
      - /app/node_modules
    depends_on:
      - shared-components
      - developer-api
    networks:
      - tta-network

  # Admin Interface Service
  admin-interface:
    build:
      context: ./web-interfaces/admin-interface
      dockerfile: Dockerfile
    container_name: tta-admin-interface
    ports:
      - "3005:3000"
    environment:
      - NODE_ENV=development
      - VITE_API_BASE_URL=http://localhost:8000
      - VITE_SHARED_COMPONENTS_URL=http://localhost:3001
    volumes:
      - ./web-interfaces/admin-interface:/app
      - /app/node_modules
    depends_on:
      - shared-components
      - admin-api
    networks:
      - tta-network

  # Patient API Service
  patient-api:
    build:
      context: .
      dockerfile: Dockerfile.patient-api
    container_name: tta-patient-api
    ports:
      - "8001:8000"
    environment:
      - PYTHONPATH=/app
      - DATABASE_URL=postgresql://tta_user:tta_password@postgres:5432/tta_db
      - REDIS_URL=redis://redis:6379
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=neo4j_password
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - FEATURE_AI_NARRATIVE=true
      - FEATURE_LIVING_WORLDS=true
    volumes:
      - ./src:/app/src
      - ./pyproject.toml:/app/pyproject.toml
    depends_on:
      - postgres
      - redis
      - neo4j
    networks:
      - tta-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/patient/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Clinical API Service
  clinical-api:
    build:
      context: .
      dockerfile: Dockerfile.clinical-api
    container_name: tta-clinical-api
    ports:
      - "8002:8000"
    environment:
      - PYTHONPATH=/app
      - DATABASE_URL=postgresql://tta_user:tta_password@postgres:5432/tta_db
      - REDIS_URL=redis://redis:6379
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=neo4j_password
      - FEATURE_REAL_TIME_MONITORING=true
    volumes:
      - ./src:/app/src
      - ./pyproject.toml:/app/pyproject.toml
    depends_on:
      - postgres
      - redis
      - neo4j
    networks:
      - tta-network

  # Developer API Service
  developer-api:
    build:
      context: .
      dockerfile: Dockerfile.developer-api
    container_name: tta-developer-api
    ports:
      - "8003:8000"
    environment:
      - PYTHONPATH=/app
      - DATABASE_URL=postgresql://tta_user:tta_password@postgres:5432/tta_db
    volumes:
      - ./src:/app/src
      - ./pyproject.toml:/app/pyproject.toml
    depends_on:
      - postgres
    networks:
      - tta-network

  # Admin API Service
  admin-api:
    build:
      context: .
      dockerfile: Dockerfile.admin-api
    container_name: tta-admin-api
    ports:
      - "8004:8000"
    environment:
      - PYTHONPATH=/app
      - DATABASE_URL=postgresql://tta_user:tta_password@postgres:5432/tta_db
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./src:/app/src
      - ./pyproject.toml:/app/pyproject.toml
    depends_on:
      - postgres
      - redis
    networks:
      - tta-network

  # LangGraph AI Service
  langgraph-service:
    build:
      context: .
      dockerfile: Dockerfile.langgraph
    container_name: tta-langgraph-service
    ports:
      - "8005:8000"
    environment:
      - PYTHONPATH=/app
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - MODEL_NAME=gpt-4-turbo-preview
    volumes:
      - ./src:/app/src
      - ./pyproject.toml:/app/pyproject.toml
    depends_on:
      - redis
    networks:
      - tta-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Neo4j Database for Living Worlds
  neo4j:
    image: neo4j:5.15-community
    container_name: tta-neo4j
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      - NEO4J_AUTH=neo4j/neo4j_password
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      - NEO4J_dbms_memory_heap_initial__size=512m
      - NEO4J_dbms_memory_heap_max__size=2G
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    networks:
      - tta-network
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "neo4j_password", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # PostgreSQL Database (existing)
  postgres:
    image: postgres:15-alpine
    container_name: tta-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=tta_db
      - POSTGRES_USER=tta_user
      - POSTGRES_PASSWORD=tta_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    networks:
      - tta-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tta_user -d tta_db"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache (existing)
  redis:
    image: redis:7-alpine
    container_name: tta-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - tta-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Load Balancer and Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: tta-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - patient-interface
      - clinical-dashboard
      - developer-interface
      - admin-interface
      - patient-api
      - clinical-api
      - developer-api
      - admin-api
    networks:
      - tta-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring and Observability
  prometheus:
    image: prom/prometheus:latest
    container_name: tta-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - tta-network

  grafana:
    image: grafana/grafana:latest
    container_name: tta-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - tta-network

volumes:
  postgres_data:
  redis_data:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
  prometheus_data:
  grafana_data:

networks:
  tta-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
