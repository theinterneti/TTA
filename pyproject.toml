[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "tta"
version = "0.1.0"
description = "Therapeutic Text Adventure - AI-powered therapeutic platform"
readme = "README.md"
requires-python = ">=3.10"
authors = [
    {name = "TTA Team"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Healthcare Industry",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    # Core dependencies
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "scikit-learn>=1.2.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "scipy>=1.15.0",
    "sympy>=1.13.0",
    "mpmath>=1.3.0",
    # Deep Learning
    "torch>=2.0.0",
    "transformers>=4.30.0",
    "datasets>=2.12.0",
    "accelerate>=0.20.0",
    "huggingface_hub>=0.20.0",
    "sentencepiece>=0.1.99",
    "tokenizers>=0.13.3",
    "timm>=1.0.0",
    "torchvision>=0.21.0",
    "torchaudio>=2.6.0",
    "tensorboard>=2.19.0",
    "tensorboardX>=2.6.0",
    # NLP
    "spacy>=3.5.0",
    "nltk>=3.8.0",
    "sacremoses>=0.1.1",
    "sacrebleu>=1.5.1",
    "rouge-score>=0.1.2",
    # Database
    "neo4j>=5.8.0",
    "redis>=6.0.0",
    "SQLAlchemy>=2.0.0",
    # Computer Vision
    "pytesseract>=0.3.13",
    "pillow>=11.0.0",
    # API and Web
    "fastapi>=0.95.0",
    "uvicorn>=0.22.0",
    "pydantic>=2.0.0",
    "httpx>=0.24.0",
    "starlette>=0.46.0",
    "sse-starlette>=2.2.0",
    "aiohttp>=3.11.0",
    "aiohappyeyeballs>=2.6.0",
    "anyio>=4.9.0",
    "sniffio>=1.3.0",
    "h11>=0.14.0",
    "httpcore>=1.0.0",
    # Authentication
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    "pydantic-settings>=2.0.0",
    "pyotp>=2.8.0",
    "qrcode[pil]>=7.4.0",
    # MCP Integration
    "fastmcp>=0.4.1",
    "mcp>=1.6.0",
    # Utilities
    "python-dotenv>=1.0.0",
    "tqdm>=4.65.0",
    "rich>=14.0.0",
    "typer>=0.15.0",
    "questionary>=2.1.0",
    "yaspin>=3.1.0",
    "psutil>=7.0.0",
    "py-cpuinfo>=9.0.0",
    "pynvml>=12.0.0",
    "py3nvml>=0.2.7",
    "codecarbon>=2.8.0",
    "cloudpickle>=3.1.0",
    "fsspec>=2024.0.0",
    "dill>=0.3.4",
    "multiprocess>=0.70.0",
    "xxhash>=3.5.0",
    "optuna>=4.2.0",
    "sigopt>=8.8.0",
    "python-json-logger>=3.3.0",
    "bleach>=6.2.0",
    "prometheus-client>=0.22.1",
    "pytest-asyncio>=1.1.0",
    # API Gateway specific dependencies
    "slowapi>=0.1.9", # Rate limiting
    "python-consul>=1.1.0", # Service discovery (optional)
    "circuitbreaker>=1.4.0", # Circuit breaker pattern
    "websockets>=12.0", # WebSocket support
    "playwright>=1.54.0",
    "pytest-playwright>=0.7.0",
    "requests>=2.32.4",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.3.1",
    "pytest-asyncio>=0.23.0",
    "pytest-order>=1.3.0",
    "pytest-rich>=0.2.0",
    "pytest-timeout>=2.3.0",
    "pytest-xdist>=3.6.0",
    "pytest-rerunfailures>=15.0.0",
    "black>=23.3.0",
    "isort>=5.12.0",
    "mypy>=1.3.0",
    "ruff>=0.11.0",
]

minimal = [
    # Core dependencies
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "scikit-learn>=1.2.0",
    "matplotlib>=3.7.0",
    
    # Deep Learning
    "torch>=2.0.0",
    "transformers>=4.30.0",
    "huggingface_hub>=0.20.0",
    
    # Database
    "neo4j>=5.8.0",
    "redis>=6.0.0",
    
    # API and Web
    "fastapi>=0.95.0",
    "uvicorn>=0.22.0",
    "pydantic>=2.0.0",
    "httpx>=0.24.0",
    
    # Utilities
    "python-dotenv>=1.0.0",
    "tqdm>=4.65.0",
    "rich>=14.0.0",
    "pytest>=7.3.1",
    "black>=23.3.0",
    "isort>=5.12.0",
    "mypy>=1.3.0",
    "psutil>=7.0.0",
    "codecarbon>=2.8.0",
]

gpu = [
    # GPU-dependent packages
    "torch>=2.0.0",
    "transformers>=4.30.0",
    "accelerate>=0.20.0",
    "timm>=1.0.0",
    "torchvision>=0.21.0",
    "torchaudio>=2.6.0",
    "tensorboard>=2.19.0",
    "tensorboardX>=2.6.0",
    
    # Computer Vision with GPU dependencies
    "pycocotools>=2.0.8",
    
    # GPU Utilities
    "pynvml>=12.0.0",
    "py3nvml>=0.2.7",
    "codecarbon>=2.8.0",
    "ray>=2.44.0",
]

[project.urls]
Homepage = "https://github.com/your-org/tta"
Repository = "https://github.com/your-org/tta"
Documentation = "https://github.com/your-org/tta/docs"

[tool.uv]
dev-dependencies = [
    "pytest>=7.3.1",
    "pytest-asyncio>=0.23.0",
    "pytest-order>=1.3.0",
    "pytest-rich>=0.2.0",
    "pytest-timeout>=2.3.0",
    "pytest-xdist>=3.6.0",
    "pytest-rerunfailures>=15.0.0",
    "black>=23.3.0",
    "isort>=5.12.0",
    "mypy>=1.3.0",
    "ruff>=0.11.0",
    "testcontainers>=4.12.0",
]

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["tta"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.ruff]
target-version = "py310"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
