[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[project]
name = "tta"
version = "0.1.0"
description = "Therapeutic Text Adventure - AI-powered therapeutic platform"
readme = "README.md"
requires-python = ">=3.12"
authors = [
    {name = "TTA Team"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Healthcare Industry",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    # Workspace packages
    "tta-ai-framework",
    "tta-narrative-engine",
    # Core dependencies
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "scikit-learn>=1.2.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "scipy>=1.15.0",
    "sympy>=1.13.0",
    "mpmath>=1.3.0",
    # Deep Learning
    "torch>=2.0.0",
    "transformers>=4.30.0",
    "datasets>=2.12.0",
    "accelerate>=0.20.0",
    "huggingface_hub>=0.20.0",
    "sentencepiece>=0.1.99",
    "tokenizers>=0.13.3",
    "timm>=1.0.0",
    "torchvision>=0.21.0",
    "torchaudio>=2.6.0",
    "tensorboard>=2.19.0",
    "tensorboardX>=2.6.0",
    # NLP
    "spacy>=3.5.0",
    "nltk>=3.8.0",
    "sacremoses>=0.1.1",
    "sacrebleu>=1.5.1",
    "rouge-score>=0.1.2",
    # Database
    "neo4j>=5.8.0",
    "redis>=6.0.0",
    "SQLAlchemy>=2.0.0",
    # Computer Vision
    "pytesseract>=0.3.13",
    "pillow>=11.0.0",
    # API and Web
    "fastapi>=0.95.0",
    "uvicorn>=0.22.0",
    "pydantic>=2.0.0",
    "httpx>=0.24.0",
    "starlette>=0.46.0",
    "sse-starlette>=2.2.0",
    "aiohttp>=3.11.0",
    "aiohappyeyeballs>=2.6.0",
    "anyio>=4.9.0",
    "sniffio>=1.3.0",
    "h11>=0.14.0",
    "httpcore>=1.0.0",
    # Authentication
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    "pydantic-settings>=2.0.0",
    "pyotp>=2.8.0",
    "qrcode[pil]>=7.4.0",
    "PyJWT>=2.8.0",
    # MCP Integration
    "fastmcp>=0.4.1",
    "mcp>=1.6.0",
    # Agent Integration
    "openhands-sdk>=0.1.0",
    # LangChain and LangGraph
    "langchain-core>=0.3.0",
    "langchain-openai>=0.2.0",
    "langgraph>=0.2.0",
    # Utilities
    "python-dotenv>=1.0.0",
    "tqdm>=4.65.0",
    "rich>=14.0.0",
    "typer>=0.15.0",
    "questionary>=2.1.0",
    "yaspin>=3.1.0",
    "psutil>=7.0.0",
    "py-cpuinfo>=9.0.0",
    "pynvml>=12.0.0",
    "py3nvml>=0.2.7",
    # "codecarbon>=3.0.7",  # Temporarily disabled due to httpx version conflict with openhands-sdk
    "cloudpickle>=3.1.0",
    "fsspec>=2024.0.0",
    "dill>=0.3.4",
    "multiprocess>=0.70.0",
    "xxhash>=3.5.0",
    "optuna>=4.2.0",
    "sigopt>=8.8.0",
    "python-json-logger>=3.3.0",
    "bleach>=6.2.0",
    "prometheus-client>=0.22.1",
    # Security
    "defusedxml>=0.7.1",
    # Error Monitoring and Performance Tracking
    "sentry-sdk[fastapi]>=2.0.0",
    # Docker Integration
    "docker>=7.0.0",
    "notebooklm-mcp>=2.0.11",
    "task>=0.1.0",
]

# DEPRECATED: Use dependency-groups instead (see below)
# Kept for backwards compatibility with tools that don't support dependency-groups yet
[project.optional-dependencies]
dev = [
    "pytest>=7.3.1",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=5.0.0",
    "pytest-order>=1.3.0",
    "pytest-rich>=0.2.0",
    "pytest-timeout>=2.3.0",
    "pytest-xdist>=3.6.0",
    "pytest-rerunfailures>=15.0.0",
    "ruff>=0.11.0",
    "pyright>=1.1.350",
    "pre-commit>=3.5.0",
    "testcontainers>=4.12.0",
    "prospector[with_pyright]>=1.10.2",
]

minimal = [
    # Core dependencies
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "scikit-learn>=1.2.0",
    "matplotlib>=3.7.0",

    # Deep Learning
    "torch>=2.0.0",
    "transformers>=4.30.0",
    "huggingface_hub>=0.20.0",

    # Database
    "neo4j>=5.8.0",
    "redis>=6.0.0",

    # API and Web
    "fastapi>=0.95.0",
    "uvicorn>=0.22.0",
    "pydantic>=2.0.0",
    "httpx>=0.24.0",

    # Utilities
    "python-dotenv>=1.0.0",
    "tqdm>=4.65.0",
    "rich>=14.0.0",
    "pytest>=7.3.1",
    "ruff>=0.11.0",
    "pyright>=1.1.350",
    "psutil>=7.0.0",
    # "codecarbon>=3.0.7",  # Temporarily disabled due to httpx version conflict with openhands-sdk
]

# ============================================================================
# UV DEPENDENCY GROUPS (PEP 735)
# ============================================================================
# Organized dependency groups for granular installation and faster CI/CD
# Usage:
#   uv sync                    # Install all groups (default)
#   uv sync --group test       # Install only test dependencies
#   uv sync --group lint       # Install only linting tools
#   uv sync --group type       # Install only type checking tools

[dependency-groups]
# Development and testing utilities (synced by default with 'uv sync')
# Development tools (IDE, debugging, pre-commit hooks)
dev = [
    "pre-commit>=3.5.0",
    "ipython>=8.12.0",
    "ipdb>=0.13.13",
    "prospector[with_pyright]>=1.10.2",
]

# Testing frameworks and utilities
test = [
    # Core testing frameworks
    "pytest>=7.3.1",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=5.0.0",
    "pytest-order>=1.3.0",
    "pytest-rich>=0.2.0",
    "pytest-timeout>=2.3.0",
    "pytest-xdist>=3.6.0",
    "pytest-rerunfailures>=15.0.0",
    "testcontainers>=4.12.0",
    # Advanced testing tools
    "hypothesis>=6.100.0", # Property-based testing
    "mutmut>=2.4.0", # Mutation testing
    "pytest-benchmark>=4.0.0", # Performance benchmarking
    "pact-python>=2.2.0", # Contract testing
    "cosmic-ray>=8.4.3",
]

# Staging environment tools (monitoring, profiling, debugging)
staging = [
    "py-spy>=0.3.14", # Profiling
    "memory-profiler>=0.61.0", # Memory profiling
    "prometheus-client>=0.20.0", # Metrics
]

# Production environment (minimal - uses main dependencies)
production = []

# Linting and formatting tools
lint = [
    "ruff>=0.11.0",
]

# Type checking tools and stubs
type = [
    "pyright>=1.1.350",
    "types-requests>=2.31.0",
    "types-PyYAML>=6.0.12",
    "types-redis>=4.6.0",
    "types-setuptools>=68.0.0",
]

# Documentation tools (currently minimal)
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
]

gpu = [
    # GPU-dependent packages
    "torch>=2.0.0",
    "transformers>=4.30.0",
    "accelerate>=0.20.0",
    "timm>=1.0.0",
    "torchvision>=0.21.0",
    "torchaudio>=2.6.0",
    "tensorboard>=2.19.0",
    "tensorboardX>=2.6.0",

    # Computer Vision with GPU dependencies
    "pycocotools>=2.0.8",

    # GPU Utilities
    "pynvml>=12.0.0",
    "py3nvml>=0.2.7",
    # "codecarbon>=3.0.7",  # Temporarily disabled due to httpx version conflict with openhands-sdk
    "ray>=2.44.0",
]

[project.urls]
Homepage = "https://github.com/your-org/tta"
Repository = "https://github.com/your-org/tta"
Documentation = "https://github.com/your-org/tta/docs"

[tool.uv]
# ============================================================================
# UV PROJECT CONFIGURATION
# ============================================================================
# These settings work in conjunction with uv.toml to ensure consistent
# virtual environment management across all contexts.

# Default dependency groups to install with 'uv sync'
# Includes both dev tools and testing frameworks for productive local development
default-groups = ["dev", "test"]

# DEPRECATED: Replaced by [dependency-groups] above
# This section is kept for backwards compatibility but is no longer the primary way to manage dev dependencies
# The [dependency-groups] section provides more granular control and faster CI/CD
#
# Note: To install specific groups: uv sync --group lint --group type

# Managed project environment (ensures UV manages the virtual environment)
managed = true

# Python version preference
# Prefer UV-managed Python installations for consistency
python-preference = "managed"

# Dependency resolution environments
# Restrict to Linux (WSL2) and Python 3.10+ for faster resolution
# Note: Environments must be disjoint, so we combine the conditions
environments = [
    "sys_platform == 'linux' and python_version >= '3.10'",
]

# Cache configuration for WSL2 optimization
# Use project-local cache to avoid cross-filesystem overhead
cache-dir = "./.uv_cache"

# Cache invalidation keys
# Rebuild when these files change
cache-keys = [
    { file = "pyproject.toml" },
    { file = "uv.lock" },
]

# ============================================================================
# UV WORKSPACE CONFIGURATION
# ============================================================================
# Monorepo workspace configuration for managing multiple packages

[tool.uv.workspace]
members = [
    "packages/tta-ai-framework",
    "packages/tta-narrative-engine",
]

[tool.uv.sources]
tta-ai-framework = { workspace = true }
tta-narrative-engine = { workspace = true }

# Black and isort removed - functionality replaced by Ruff formatter and import sorting

# MyPy configuration removed - migrated to Pyright for 10-100x faster type checking

[tool.pyright]
# Python version and platform
pythonVersion = "3.10"
pythonPlatform = "Linux"

# Paths
include = ["src"]
exclude = [
    "**/node_modules",
    "**/__pycache__",
    "**/.venv",
    "**/venv",
    "tests/",
    "docs/",
    "scripts/",
    "examples/",
    "tta.prototype/",
    "tta.dev/",
    "tta.prod/",
    "obsolete/",
    "artifacts/"
]

# Type checking mode (equivalent to MyPy strict settings)
typeCheckingMode = "standard"  # "off", "basic", "standard", "strict"

# Strict type checking rules (matching MyPy configuration)
strictListInference = true
strictDictionaryInference = true
strictSetInference = true
strictParameterNoneValue = true

# Core type checking (equivalent to MyPy's disallow_untyped_defs, etc.)
reportGeneralTypeIssues = "error"
reportMissingImports = "error"
reportMissingTypeStubs = "warning"
reportInvalidTypeForm = "error"

# Function/method type checking (equivalent to MyPy's disallow_untyped_defs)
reportUntypedFunctionDecorator = "error"
reportUntypedClassDecorator = "error"
reportUntypedBaseClass = "error"

# Return type checking (equivalent to MyPy's warn_return_any, warn_no_return)
reportUnknownParameterType = "warning"
reportUnknownArgumentType = "warning"
reportUnknownVariableType = "warning"
reportUnknownMemberType = "warning"

# Redundancy and unused code (equivalent to MyPy's warn_redundant_casts, warn_unused_ignores)
reportUnnecessaryIsInstance = "warning"
reportUnnecessaryCast = "warning"
reportUnnecessaryComparison = "warning"

# Unreachable code (equivalent to MyPy's warn_unreachable)
enableReachabilityAnalysis = true

# Optional type checking (equivalent to MyPy's no_implicit_optional)
reportOptionalMemberAccess = "error"
reportOptionalSubscript = "error"
reportOptionalCall = "error"
reportOptionalIterable = "error"
reportOptionalContextManager = "error"
reportOptionalOperand = "error"

# Additional strict checks
reportIncompatibleMethodOverride = "error"
reportIncompatibleVariableOverride = "error"
reportOverlappingOverload = "error"
reportPossiblyUnboundVariable = "error"

# Warnings for code quality
reportUnusedImport = "warning"
reportUnusedClass = "warning"
reportUnusedFunction = "warning"
reportUnusedVariable = "warning"
reportDuplicateImport = "warning"

[tool.ruff]
target-version = "py310"
line-length = 88

# Ruff now handles linting, formatting, AND import sorting
[tool.ruff.lint]
select = [
    "E4", "E7", "E9",  # pycodestyle errors (subset to avoid formatter conflicts)
    "F",   # pyflakes
    "I",   # isort (import sorting)
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "S",   # flake8-bandit (security)
    "T20", # flake8-print (catch print statements)
    "SIM", # flake8-simplify
    "RET", # flake8-return
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate (commented-out code)
    "PL",  # pylint
    "PERF", # perflint (performance anti-patterns)
]
ignore = [
    "E501",  # line too long, handled by formatter
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "PLR0913", # too many arguments
    "PLR2004", # magic value comparison
    "S101",  # use of assert (common in tests)
    "SIM108", # use ternary operator (sometimes less readable)
]

# Allow auto-fixing for all enabled rules
fixable = ["ALL"]
unfixable = []

# Per-file ignores
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "E402"]
"tests/**/*.py" = ["S101", "ARG", "PLR2004"]  # Allow assert, unused args, magic values in tests
"scripts/analyze-neo4j-staging-metrics.py" = ["T201", "PLR0912", "PLR0915", "ARG001", "F841", "PTH123"]  # Reporting script needs print statements

# Import sorting configuration (replaces isort)
[tool.ruff.lint.isort]
known-first-party = ["tta", "monitoring", "src", "testing"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

# Formatter configuration (replaces Black)
[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true  # Format code examples in docstrings

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --cov=src --cov-report=term-missing --cov-report=html --cov-report=xml"
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
# pytest-asyncio configuration
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
# Filter warnings
filterwarnings = [
    "ignore:datetime.datetime.utcnow\\(\\) is deprecated:DeprecationWarning",
    "ignore:.*'crypt' is deprecated.*:DeprecationWarning",
    "ignore:.*pythonjsonlogger\\.jsonlogger has been moved.*:DeprecationWarning",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "property: Property-based tests using hypothesis",
    "performance: Performance benchmarks using pytest-benchmark",
    "contract: Contract tests using pact-python",
    "slow: Slow-running tests (> 1 second)",
    "neo4j: Tests requiring Neo4j database (deselect with '-m \"not neo4j\"')",
    "redis: Tests requiring Redis database (deselect with '-m \"not redis\"')",
    "comprehensive: Comprehensive battery tests (deselect with '-m \"not comprehensive\"')",
]

# Hypothesis configuration for property-based testing
[tool.hypothesis]
max_examples = 100              # Number of test cases to generate per property
deadline = 5000                 # 5 seconds per test case
database = ".hypothesis/examples"  # Store examples for regression testing
derandomize = false             # Allow randomization for better coverage
print_blob = false              # Don't print internal state on failure

# pytest-benchmark configuration for performance testing
[tool.pytest-benchmark]
min_rounds = 5                  # Minimum number of benchmark rounds
max_time = 1.0                  # Maximum time per benchmark (seconds)
min_time = 0.000005             # Minimum time per benchmark (microseconds)
warmup = true                   # Enable warmup rounds
disable_gc = true               # Disable garbage collection during benchmarks
save_data = true                # Save benchmark data
autosave = true                 # Automatically save after each run
compare = "0001"                # Compare to baseline 0001 by default

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]
branch = true                   # Measure branch coverage

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
fail_under = 70.0
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Coverage thresholds for generated tests (OpenHands integration)
# These modules have generated test suites targeting 70% coverage
[tool.coverage.paths]
source = [
    "src/agent_orchestration/protocol_bridge.py",
    "src/agent_orchestration/capability_matcher.py",
    "src/agent_orchestration/circuit_breaker.py",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"
