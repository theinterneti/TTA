# Nginx Configuration for TTA Staging Environment
# Optimized for homelab deployment with load balancing and monitoring

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Worker configuration
worker_rlimit_nofile 65535;

events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
}

http {
    # Basic settings
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging format for staging
    log_format staging_main '$remote_addr - $remote_user [$time_local] "$request" '
                           '$status $body_bytes_sent "$http_referer" '
                           '"$http_user_agent" "$http_x_forwarded_for" '
                           'rt=$request_time uct="$upstream_connect_time" '
                           'uht="$upstream_header_time" urt="$upstream_response_time" '
                           'env=staging';

    # Access log
    access_log /var/log/nginx/access.log staging_main;

    # Performance settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 50M;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate limiting for staging
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=frontend:10m rate=20r/s;

    # Upstream definitions
    upstream player_api_staging {
        least_conn;
        server player-api-staging:8080 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream player_frontend_staging {
        least_conn;
        server player-frontend-staging:3000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream grafana_staging {
        server grafana-staging:3000 max_fails=3 fail_timeout=30s;
    }

    # Health check endpoint
    server {
        listen 80;
        server_name health.staging.local;

        location /health {
            access_log off;
            return 200 '{"status":"healthy","environment":"staging","service":"nginx"}';
            add_header Content-Type application/json;
        }
    }

    # Main staging server
    server {
        listen 80;
        server_name staging.tta-homelab.local localhost;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header X-Environment "staging" always;

        # CSP for staging
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; connect-src 'self' ws: wss:; font-src 'self' data:;" always;

        # Frontend routes
        location / {
            limit_req zone=frontend burst=20 nodelay;

            proxy_pass http://player_frontend_staging;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Environment "staging";
            proxy_cache_bypass $http_upgrade;

            # Timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # API routes
        location /api/ {
            limit_req zone=api burst=10 nodelay;

            proxy_pass http://player_api_staging/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Environment "staging";
            proxy_cache_bypass $http_upgrade;

            # API-specific timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # WebSocket routes
        location /ws/ {
            proxy_pass http://player_api_staging/ws/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Environment "staging";

            # WebSocket-specific settings
            proxy_connect_timeout 7d;
            proxy_send_timeout 7d;
            proxy_read_timeout 7d;
        }

        # Health check
        location /health {
            access_log off;
            proxy_pass http://player_api_staging/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # Metrics endpoint (restricted)
        location /metrics {
            allow 172.26.0.0/16;  # Only staging network
            deny all;

            proxy_pass http://player_api_staging/metrics;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }

    # Monitoring server (Grafana)
    server {
        listen 80;
        server_name monitoring.staging.tta-homelab.local;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-Environment "staging" always;

        location / {
            proxy_pass http://grafana_staging;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
        }
    }

    # API-only server (for direct API access)
    server {
        listen 80;
        server_name api.staging.tta-homelab.local;

        # Security headers
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-Environment "staging" always;

        location / {
            limit_req zone=api burst=20 nodelay;

            proxy_pass http://player_api_staging/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Environment "staging";
            proxy_cache_bypass $http_upgrade;
        }
    }

    # Status and monitoring endpoints
    server {
        listen 80;
        server_name status.staging.tta-homelab.local;

        # Nginx status
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 172.26.0.0/16;  # Only staging network
            deny all;
        }

        # Health check
        location /health {
            access_log off;
            return 200 '{"status":"healthy","environment":"staging","service":"nginx","timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
        }
    }
}
