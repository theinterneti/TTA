name: Update Project Board

on:
  workflow_call:
    inputs:
      issue_number:
        description: 'Issue number to add/update in project'
        required: true
        type: number
      action:
        description: 'Action to perform: add, update_status, update_fields, complete'
        required: true
        type: string
      component_name:
        description: 'Component name (e.g., Neo4j, Carbon)'
        required: false
        type: string
      current_stage:
        description: 'Current stage: Development, Staging, Production'
        required: false
        type: string
      target_stage:
        description: 'Target stage: Staging, Production'
        required: false
        type: string
      test_coverage:
        description: 'Test coverage percentage (0-100)'
        required: false
        type: number
      blocker_count:
        description: 'Number of open blocker issues'
        required: false
        type: number
      functional_group:
        description: 'Functional group'
        required: false
        type: string
    secrets:
      GH_PROJECT_TOKEN:
        description: 'GitHub token with project write access'
        required: true

jobs:
  update-project:
    name: Update Project Board
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Load project configuration
        id: config
        run: |
          # In production, load from encrypted secrets or repository variables
          # For now, we'll use repository secrets
          echo "PROJECT_ID=${{ secrets.PROJECT_ID }}" >> $GITHUB_OUTPUT
          echo "FIELD_CURRENT_STAGE_ID=${{ secrets.FIELD_CURRENT_STAGE_ID }}" >> $GITHUB_OUTPUT
          echo "FIELD_TARGET_STAGE_ID=${{ secrets.FIELD_TARGET_STAGE_ID }}" >> $GITHUB_OUTPUT
          echo "FIELD_BLOCKER_COUNT_ID=${{ secrets.FIELD_BLOCKER_COUNT_ID }}" >> $GITHUB_OUTPUT
          echo "FIELD_TEST_COVERAGE_ID=${{ secrets.FIELD_TEST_COVERAGE_ID }}" >> $GITHUB_OUTPUT
          echo "FIELD_LAST_UPDATED_ID=${{ secrets.FIELD_LAST_UPDATED_ID }}" >> $GITHUB_OUTPUT
          echo "FIELD_FUNCTIONAL_GROUP_ID=${{ secrets.FIELD_FUNCTIONAL_GROUP_ID }}" >> $GITHUB_OUTPUT

      - name: Add issue to project
        if: inputs.action == 'add'
        uses: actions/add-to-project@v0.5.0
        with:
          project-url: https://github.com/users/theinterneti/projects/1
          github-token: ${{ secrets.GH_PROJECT_TOKEN }}
          labeled: promotion:requested

      - name: Get project item ID
        id: get_item
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PROJECT_TOKEN }}
          script: |
            const query = `
              query($owner: String!, $issueNumber: Int!) {
                repository(owner: $owner, name: "TTA") {
                  issue(number: $issueNumber) {
                    projectItems(first: 10) {
                      nodes {
                        id
                        project {
                          id
                        }
                      }
                    }
                  }
                }
              }
            `;

            const variables = {
              owner: context.repo.owner,
              issueNumber: ${{ inputs.issue_number }}
            };

            const result = await github.graphql(query, variables);
            const projectId = '${{ steps.config.outputs.PROJECT_ID }}';
            const item = result.repository.issue.projectItems.nodes.find(
              item => item.project.id === projectId
            );

            if (item) {
              core.setOutput('item_id', item.id);
              console.log(`Found project item: ${item.id}`);
            } else {
              core.setFailed('Issue not found in project');
            }

      - name: Update Current Stage field
        if: inputs.current_stage != ''
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PROJECT_TOKEN }}
          script: |
            const stageMap = {
              'Development': '${{ secrets.OPTION_DEVELOPMENT_ID }}',
              'Staging': '${{ secrets.OPTION_STAGING_ID }}',
              'Production': '${{ secrets.OPTION_PRODUCTION_ID }}'
            };

            const optionId = stageMap['${{ inputs.current_stage }}'];

            const mutation = `
              mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                updateProjectV2ItemFieldValue(
                  input: {
                    projectId: $projectId
                    itemId: $itemId
                    fieldId: $fieldId
                    value: { singleSelectOptionId: $optionId }
                  }
                ) {
                  projectV2Item {
                    id
                  }
                }
              }
            `;

            const variables = {
              projectId: '${{ steps.config.outputs.PROJECT_ID }}',
              itemId: '${{ steps.get_item.outputs.item_id }}',
              fieldId: '${{ steps.config.outputs.FIELD_CURRENT_STAGE_ID }}',
              optionId: optionId
            };

            await github.graphql(mutation, variables);
            console.log('Updated Current Stage to ${{ inputs.current_stage }}');

      - name: Update Target Stage field
        if: inputs.target_stage != ''
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PROJECT_TOKEN }}
          script: |
            const stageMap = {
              'Staging': '${{ secrets.OPTION_TARGET_STAGING_ID }}',
              'Production': '${{ secrets.OPTION_TARGET_PRODUCTION_ID }}'
            };

            const optionId = stageMap['${{ inputs.target_stage }}'];

            const mutation = `
              mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                updateProjectV2ItemFieldValue(
                  input: {
                    projectId: $projectId
                    itemId: $itemId
                    fieldId: $fieldId
                    value: { singleSelectOptionId: $optionId }
                  }
                ) {
                  projectV2Item {
                    id
                  }
                }
              }
            `;

            const variables = {
              projectId: '${{ steps.config.outputs.PROJECT_ID }}',
              itemId: '${{ steps.get_item.outputs.item_id }}',
              fieldId: '${{ steps.config.outputs.FIELD_TARGET_STAGE_ID }}',
              optionId: optionId
            };

            await github.graphql(mutation, variables);
            console.log('Updated Target Stage to ${{ inputs.target_stage }}');

      - name: Update Test Coverage field
        if: inputs.test_coverage != 0
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PROJECT_TOKEN }}
          script: |
            const mutation = `
              mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: Float!) {
                updateProjectV2ItemFieldValue(
                  input: {
                    projectId: $projectId
                    itemId: $itemId
                    fieldId: $fieldId
                    value: { number: $value }
                  }
                ) {
                  projectV2Item {
                    id
                  }
                }
              }
            `;

            const variables = {
              projectId: '${{ steps.config.outputs.PROJECT_ID }}',
              itemId: '${{ steps.get_item.outputs.item_id }}',
              fieldId: '${{ steps.config.outputs.FIELD_TEST_COVERAGE_ID }}',
              value: ${{ inputs.test_coverage }}
            };

            await github.graphql(mutation, variables);
            console.log('Updated Test Coverage to ${{ inputs.test_coverage }}%');

      - name: Update Blocker Count field
        if: inputs.blocker_count != null
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PROJECT_TOKEN }}
          script: |
            const mutation = `
              mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: Float!) {
                updateProjectV2ItemFieldValue(
                  input: {
                    projectId: $projectId
                    itemId: $itemId
                    fieldId: $fieldId
                    value: { number: $value }
                  }
                ) {
                  projectV2Item {
                    id
                  }
                }
              }
            `;

            const variables = {
              projectId: '${{ steps.config.outputs.PROJECT_ID }}',
              itemId: '${{ steps.get_item.outputs.item_id }}',
              fieldId: '${{ steps.config.outputs.FIELD_BLOCKER_COUNT_ID }}',
              value: ${{ inputs.blocker_count }}
            };

            await github.graphql(mutation, variables);
            console.log('Updated Blocker Count to ${{ inputs.blocker_count }}');

      - name: Update Last Updated field
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PROJECT_TOKEN }}
          script: |
            const mutation = `
              mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: Date!) {
                updateProjectV2ItemFieldValue(
                  input: {
                    projectId: $projectId
                    itemId: $itemId
                    fieldId: $fieldId
                    value: { date: $value }
                  }
                ) {
                  projectV2Item {
                    id
                  }
                }
              }
            `;

            const today = new Date().toISOString().split('T')[0];

            const variables = {
              projectId: '${{ steps.config.outputs.PROJECT_ID }}',
              itemId: '${{ steps.get_item.outputs.item_id }}',
              fieldId: '${{ steps.config.outputs.FIELD_LAST_UPDATED_ID }}',
              value: today
            };

            await github.graphql(mutation, variables);
            console.log(`Updated Last Updated to ${today}`);
