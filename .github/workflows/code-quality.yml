name: Code Quality

on:
  pull_request:
    branches:
      - main
      - staging
      - development
      - feat/*
  push:
    branches:
      - main
      - staging
      - development
      - feat/production-deployment-infrastructure
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.12'

jobs:
  lint:
    name: Lint with Ruff
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v1

      - name: Cache uv dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml', '**/uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Install dependencies
        run: uv sync --group lint

      - name: Run ruff linter
        run: |
          echo "Running ruff linter..."
          uvx ruff check src/ tests/ --output-format=github
        continue-on-error: false

      - name: Run ruff formatter check
        run: |
          echo "Checking code formatting with ruff..."
          uvx ruff format --check --diff src/ tests/
        continue-on-error: false

      - name: Upload lint results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ruff-results
          path: .ruff_cache/
          retention-days: 7

      - name: Generate formatting report
        if: failure()
        run: |
          echo "## Formatting/Linting Issues Found" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Run the following commands to fix issues:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "uv run ruff check --fix src/ tests/" >> $GITHUB_STEP_SUMMARY
          echo "uv run ruff format src/ tests/" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  type-check:
    name: Type Check with Pyright
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v1

      - name: Cache uv dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml', '**/uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Install dependencies
        run: uv sync --group type

      - name: Run Pyright type checker
        run: |
          echo "Running Pyright type checker (10-100x faster than MyPy)..."
          uvx pyright src/
        continue-on-error: false

      - name: Upload Pyright results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pyright-results
          path: .pyright_cache/
          retention-days: 7

      - name: Generate type check report
        if: failure()
        run: |
          echo "## Type Check Issues Found" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Run the following command to see detailed type errors:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "uvx pyright src/" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  complexity:
    name: Code Complexity Analysis
    runs-on: ubuntu-latest
    continue-on-error: true  # Don't fail the build on complexity issues

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v1

      - name: Cache uv dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml', '**/uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Install dependencies
        run: |
          uv sync --all-extras --dev
          uv pip install radon

      - name: Analyze code complexity
        run: |
          echo "Analyzing code complexity with radon..."
          echo "## Code Complexity Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Cyclomatic Complexity
          echo "### Cyclomatic Complexity" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          uv run radon cc src/ -a -s >> $GITHUB_STEP_SUMMARY || true
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Maintainability Index
          echo "### Maintainability Index" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          uv run radon mi src/ -s >> $GITHUB_STEP_SUMMARY || true
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Raw Metrics
          echo "### Raw Metrics" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          uv run radon raw src/ -s >> $GITHUB_STEP_SUMMARY || true
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Check for high complexity functions
        run: |
          echo "Checking for functions with complexity > 10..."
          uv run radon cc src/ -n C -s || echo "No high complexity functions found"

      - name: Upload complexity report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: complexity-report
          path: |
            complexity-report.txt
          retention-days: 30

  summary:
    name: Code Quality Summary
    runs-on: ubuntu-latest
    needs: [lint, format-check, type-check, complexity]
    if: always()

    steps:
      - name: Generate summary
        run: |
          echo "## Code Quality Check Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check job results
          if [[ "${{ needs.lint.result }}" == "success" ]]; then
            echo "✅ **Linting (ruff):** Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Linting (ruff):** Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.format-check.result }}" == "success" ]]; then
            echo "✅ **Format Check (black/isort):** Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Format Check (black/isort):** Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.type-check.result }}" == "success" ]]; then
            echo "✅ **Type Check (mypy):** Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Type Check (mypy):** Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.complexity.result }}" == "success" ]]; then
            echo "ℹ️ **Complexity Analysis:** Completed (informational)" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **Complexity Analysis:** Completed with warnings (informational)" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Quick Fixes" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "To fix formatting issues locally:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "uv run black src/ tests/" >> $GITHUB_STEP_SUMMARY
          echo "uv run isort src/ tests/" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "To check linting issues locally:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "uv run ruff check src/ tests/" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "To check type issues locally:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "uv run mypy src/" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Check overall status
        run: |
          if [[ "${{ needs.lint.result }}" != "success" ]] || \
             [[ "${{ needs.format-check.result }}" != "success" ]] || \
             [[ "${{ needs.type-check.result }}" != "success" ]]; then
            echo "Code quality checks failed. Please fix the issues and try again."
            exit 1
          fi
          echo "All code quality checks passed!"
