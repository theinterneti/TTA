name: Code Quality

on:
  pull_request:
    branches:
      - main
      - staging
      - development
      - feat/*
  push:
    branches:
      - main
      - staging
      - development
      - feat/production-deployment-infrastructure
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.12'

jobs:
  # Detect branch tier for tier-based quality checks
  tier:
    uses: ./.github/workflows/templates/determine-tier.yml

  lint:
    name: Lint with Ruff
    runs-on: ubuntu-latest
    needs: tier
    # Run linting on tier 2+ (development, staging, main)
    if: needs.tier.outputs.tier >= '2'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v1
        with:
          version: "0.8.17"

      - name: Cache uv dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml', '**/uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Install dependencies
        run: uv sync --all-groups

      - name: Run ruff linter
        run: |
          echo "Running ruff linter..."
          echo "Ruff version: $(uvx ruff --version)"
          uvx ruff check src/ tests/ --output-format=github --statistics
        continue-on-error: false

      - name: Run ruff formatter check
        run: |
          echo "Checking code formatting with ruff..."
          uvx ruff format --check --diff src/ tests/
        continue-on-error: false

      - name: Upload lint results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ruff-results
          path: .ruff_cache/
          retention-days: 7

      - name: Generate formatting report
        if: failure()
        run: |
          echo "## Formatting/Linting Issues Found" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Run the following commands to fix issues:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "uv run ruff check --fix src/ tests/" >> $GITHUB_STEP_SUMMARY
          echo "uv run ruff format src/ tests/" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  format-check:
    name: Format Check with Ruff
    runs-on: ubuntu-latest
    needs: tier
    # Format check runs on all tiers (tier 1+)

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v1
        with:
          version: "0.8.17"

      - name: Cache uv dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml', '**/uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Install dependencies
        run: uv sync --all-groups

      - name: Run ruff formatter check
        run: |
          echo "Checking code formatting with ruff..."
          uvx ruff format --check --diff src/ tests/
        continue-on-error: ${{ needs.tier.outputs.tier == '1' }}  # Allow failures on experimental

      - name: Generate formatting report
        if: failure()
        run: |
          echo "## Formatting Issues Found" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch Tier**: ${{ needs.tier.outputs.tier }} - ${{ needs.tier.outputs.tier_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Run the following command to fix issues:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "uv run ruff format src/ tests/" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  type-check:
    name: Type Check with Pyright
    runs-on: ubuntu-latest
    needs: tier
    # Run type checking on tier 3+ (staging, main)
    if: needs.tier.outputs.tier >= '3'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v1
        with:
          version: "0.8.17"

      - name: Cache uv dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml', '**/uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Install dependencies
        run: uv sync --all-groups

      - name: Run Pyright type checker
        run: |
          echo "Running Pyright type checker (10-100x faster than MyPy)..."
          uvx pyright src/
        continue-on-error: false

      - name: Upload Pyright results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pyright-results
          path: .pyright_cache/
          retention-days: 7

      - name: Generate type check report
        if: failure()
        run: |
          echo "## Type Check Issues Found" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Run the following command to see detailed type errors:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "uvx pyright src/" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  security:
    name: Security Scan with Bandit
    runs-on: ubuntu-latest
    needs: tier
    # Run security scan on tier 3+ (staging, main)
    if: needs.tier.outputs.tier >= '3'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v1
        with:
          version: "0.8.17"

      - name: Cache uv dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml', '**/uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Install dependencies
        run: |
          uv sync --all-groups
          uv pip install bandit

      - name: Run security scan
        run: |
          echo "Running security scan with bandit..."
          uv run bandit -r src/ -f json -o bandit-report.json || true
          uv run bandit -r src/ || true
        continue-on-error: true

      - name: Upload security report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: bandit-report.json
          retention-days: 30

  complexity:
    name: Code Complexity Analysis
    runs-on: ubuntu-latest
    needs: tier
    continue-on-error: true  # Don't fail the build on complexity issues

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v1
        with:
          version: "0.8.17"

      - name: Cache uv dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml', '**/uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Install dependencies
        run: |
          uv sync --all-groups
          uv pip install radon

      - name: Analyze code complexity
        run: |
          echo "Analyzing code complexity with radon..."
          echo "## Code Complexity Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Cyclomatic Complexity
          echo "### Cyclomatic Complexity" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          uv run radon cc src/ -a -s >> $GITHUB_STEP_SUMMARY || true
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Maintainability Index
          echo "### Maintainability Index" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          uv run radon mi src/ -s >> $GITHUB_STEP_SUMMARY || true
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Raw Metrics
          echo "### Raw Metrics" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          uv run radon raw src/ -s >> $GITHUB_STEP_SUMMARY || true
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Check for high complexity functions
        run: |
          echo "Checking for functions with complexity > 10..."
          uv run radon cc src/ -n C -s || echo "No high complexity functions found"

      - name: Upload complexity report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: complexity-report
          path: |
            complexity-report.txt
          retention-days: 30

  summary:
    name: Code Quality Summary
    runs-on: ubuntu-latest
    needs: [tier, format-check, lint, type-check, security, complexity]
    if: always()

    steps:
      - name: Generate summary
        run: |
          echo "## Code Quality Check Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch Tier**: ${{ needs.tier.outputs.tier }} - ${{ needs.tier.outputs.tier_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Format check (all tiers)
          echo "### Format Check (Tier 1+)" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.format-check.result }}" == "success" ]]; then
            echo "✅ **Format Check (Ruff):** Passed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.format-check.result }}" == "failure" ]] && [[ "${{ needs.tier.outputs.tier }}" == "1" ]]; then
            echo "⚠️ **Format Check (Ruff):** Failed (allowed on experimental)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Format Check (Ruff):** Failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

          # Linting (tier 2+)
          echo "### Linting (Tier 2+)" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.tier.outputs.tier }}" == "1" ]]; then
            echo "⏭️ **Linting (Ruff):** Skipped (experimental branch)" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.lint.result }}" == "success" ]]; then
            echo "✅ **Linting (Ruff):** Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Linting (Ruff):** Failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

          # Type checking (tier 3+)
          echo "### Type Check (Tier 3+)" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.tier.outputs.tier }}" == "1" || "${{ needs.tier.outputs.tier }}" == "2" ]]; then
            echo "⏭️ **Type Check (Pyright):** Skipped (experimental/development branch)" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.type-check.result }}" == "success" ]]; then
            echo "✅ **Type Check (Pyright):** Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Type Check (Pyright):** Failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

          # Security scan (tier 3+)
          echo "### Security Scan (Tier 3+)" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.tier.outputs.tier }}" == "1" || "${{ needs.tier.outputs.tier }}" == "2" ]]; then
            echo "⏭️ **Security Scan (Bandit):** Skipped (experimental/development branch)" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.security.result }}" == "success" ]]; then
            echo "✅ **Security Scan (Bandit):** Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **Security Scan (Bandit):** Completed with findings (informational)" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

          # Complexity analysis (informational)
          echo "### Complexity Analysis (Informational)" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.complexity.result }}" == "success" ]]; then
            echo "ℹ️ **Complexity Analysis:** Completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **Complexity Analysis:** Completed with warnings" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Quick Fixes" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "To fix formatting issues locally:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "uv run ruff format src/ tests/" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "To fix linting issues locally:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "uv run ruff check --fix src/ tests/" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "To check type issues locally:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "uvx pyright src/" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Check overall status
        run: |
          # Tier 1: Only format check required, failures allowed
          if [[ "${{ needs.tier.outputs.tier }}" == "1" ]]; then
            echo "✅ Experimental branch - all checks optional"
            exit 0
          fi

          # Tier 2: Format + Lint required
          if [[ "${{ needs.tier.outputs.tier }}" == "2" ]]; then
            if [[ "${{ needs.format-check.result }}" != "success" ]] || \
               [[ "${{ needs.lint.result }}" != "success" ]]; then
              echo "❌ Development branch quality checks failed"
              exit 1
            fi
            echo "✅ All tier 2 quality checks passed"
            exit 0
          fi

          # Tier 3+: Format + Lint + Type Check required
          if [[ "${{ needs.format-check.result }}" != "success" ]] || \
             [[ "${{ needs.lint.result }}" != "success" ]] || \
             [[ "${{ needs.type-check.result }}" != "success" ]]; then
            echo "❌ Staging/Production quality checks failed"
            exit 1
          fi

          echo "✅ All required quality checks passed for tier ${{ needs.tier.outputs.tier }}"
