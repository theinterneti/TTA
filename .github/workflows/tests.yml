name: Tests

on:
  push:
    branches: [main, feat/production-deployment-infrastructure]
  pull_request:
    branches: [main]

env:
  PROMETHEUS_ENABLED: true
  GRAFANA_ENABLED: true
  MONITORING_ENVIRONMENT: ci

jobs:
  unit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v1
      - name: Sync deps
        run: uv sync --all-extras --dev
      - name: Run unit tests with metrics collection
        run: |
          uv run pytest -q --tb=short \
            --junitxml=test-results/unit-tests.xml \
            --cov=src --cov-report=xml:coverage-unit.xml
        env:
          TTA_METRICS_ENABLED: true
          TTA_TEST_METRICS_COLLECTION: true
      - name: Upload unit test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          path: |
            test-results/
            coverage-unit.xml

  integration:
    runs-on: ubuntu-latest
    services:
      neo4j:
        image: neo4j:5-community
        env:
          NEO4J_AUTH: neo4j/testpassword
          NEO4J_ACCEPT_LICENSE_AGREEMENT: "yes"
        ports:
          - 7687:7687
        options: >-
          --health-cmd="/var/lib/neo4j/bin/cypher-shell -u neo4j -p testpassword 'RETURN 1'"
          --health-interval=10s --health-timeout=5s --health-retries=10
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping || exit 1"
          --health-interval=5s --health-timeout=3s --health-retries=10
    env:
      RUN_NEO4J_TESTS: "1"
      RUN_REDIS_TESTS: "1"
      TEST_NEO4J_URI: "bolt://localhost:7687"
      TEST_NEO4J_USERNAME: "neo4j"
      TEST_NEO4J_PASSWORD: "testpassword"
      TEST_REDIS_URI: "redis://localhost:6379/0"
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v1
      - name: Sync deps
        run: uv sync --all-extras --dev
      - name: Run integration tests with monitoring
        run: |
          uv run pytest -q --neo4j --redis --tb=short \
            --junitxml=test-results/integration-tests.xml \
            --cov=src --cov-report=xml:coverage-integration.xml
        env:
          TTA_METRICS_ENABLED: true
          TTA_TEST_METRICS_COLLECTION: true
          TTA_MONITORING_INTEGRATION_TESTS: true
      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: |
            test-results/
            coverage-integration.xml

  monitoring-validation:
    runs-on: ubuntu-latest
    needs: [unit, integration]
    if: always()
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v1
      - name: Sync deps
        run: uv sync --all-extras --dev
      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          pattern: "*-test-results"
          merge-multiple: true

      - name: Start monitoring stack with Docker Compose
        run: |
          cd monitoring
          docker-compose -f docker-compose.monitoring.yml up -d prometheus grafana

          # Wait for services to be healthy
          echo "Waiting for Prometheus to be healthy..."
          timeout 60 bash -c 'until docker exec tta-prometheus wget --no-verbose --tries=1 --spider http://localhost:9090/-/healthy 2>&1 | grep -q "200 OK"; do sleep 2; done'
          echo "✅ Prometheus is healthy"

          echo "Waiting for Grafana to be healthy..."
          timeout 60 bash -c 'until docker exec tta-grafana wget --no-verbose --tries=1 --spider http://localhost:3000/api/health 2>&1 | grep -q "200 OK"; do sleep 2; done'
          echo "✅ Grafana is healthy"

      - name: Validate monitoring infrastructure
        run: |
          # Test Prometheus connectivity
          curl -f http://localhost:9090/-/healthy || exit 1
          echo "✅ Prometheus API is accessible"

          # Test Grafana connectivity
          curl -f http://localhost:3000/api/health || exit 1
          echo "✅ Grafana API is accessible"

          # Test metrics endpoints
          uv run python -c "
          import requests
          import sys

          # Test if our metrics are being collected
          try:
              response = requests.get('http://localhost:9090/api/v1/query?query=up')
              if response.status_code == 200:
                  print('✅ Prometheus metrics query successful')
              else:
                  print('❌ Prometheus metrics query failed')
                  sys.exit(1)
          except Exception as e:
              print(f'❌ Error testing Prometheus: {e}')
              sys.exit(1)
          "

      - name: Stop monitoring stack
        if: always()
        run: |
          cd monitoring
          docker-compose -f docker-compose.monitoring.yml down -v
      - name: Performance regression detection
        run: |
          uv run python scripts/performance_regression_check.py \
            --test-results test-results/ \
            --baseline-branch main \
            --threshold 20
        continue-on-error: true
      - name: Generate monitoring report
        run: |
          uv run python scripts/generate_monitoring_report.py \
            --test-results test-results/ \
            --output monitoring-report.html
      - name: Upload monitoring artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: monitoring-validation-results
          path: |
            monitoring-report.html
            test-results/
