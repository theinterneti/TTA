name: Post-Deployment Tests

on:
  workflow_call:
    inputs:
      environment:
        description: 'Deployment environment to test (staging, production)'
        required: true
        type: string
      api_base_url:
        description: 'API base URL'
        required: true
        type: string
      frontend_base_url:
        description: 'Frontend base URL'
        required: true
        type: string
    secrets:
      NEO4J_URI:
        required: false
      NEO4J_USERNAME:
        required: false
      NEO4J_PASSWORD:
        required: false
      REDIS_HOST:
        required: false
      REDIS_PORT:
        required: false
      REDIS_PASSWORD:
        required: false
      TEST_USER_USERNAME:
        required: false
      TEST_USER_PASSWORD:
        required: false
      TEST_USER_EMAIL:
        required: false

  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment to test'
        required: true
        type: choice
        options:
          - staging
          - production
          - local
      api_base_url:
        description: 'API base URL (leave empty for default)'
        required: false
        type: string
      frontend_base_url:
        description: 'Frontend base URL (leave empty for default)'
        required: false
        type: string

env:
  PYTHON_VERSION: '3.12'

jobs:
  post-deployment-validation:
    name: Post-Deployment Validation (${{ inputs.environment }})
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV
        uses: astral-sh/setup-uv@v1

      - name: Install dependencies
        run: |
          uv sync --all-groups

      - name: Set environment variables
        run: |
          echo "DEPLOYMENT_ENV=${{ inputs.environment }}" >> $GITHUB_ENV
          echo "API_BASE_URL=${{ inputs.api_base_url }}" >> $GITHUB_ENV
          echo "FRONTEND_BASE_URL=${{ inputs.frontend_base_url }}" >> $GITHUB_ENV

      - name: Set database configuration (if provided)
        if: secrets.NEO4J_URI != ''
        run: |
          echo "NEO4J_URI=${{ secrets.NEO4J_URI }}" >> $GITHUB_ENV
          echo "NEO4J_USERNAME=${{ secrets.NEO4J_USERNAME }}" >> $GITHUB_ENV
          echo "NEO4J_PASSWORD=${{ secrets.NEO4J_PASSWORD }}" >> $GITHUB_ENV
          echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> $GITHUB_ENV
          echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> $GITHUB_ENV
          echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> $GITHUB_ENV

      - name: Set test user credentials (if provided)
        if: secrets.TEST_USER_USERNAME != ''
        run: |
          echo "TEST_USER_USERNAME=${{ secrets.TEST_USER_USERNAME }}" >> $GITHUB_ENV
          echo "TEST_USER_PASSWORD=${{ secrets.TEST_USER_PASSWORD }}" >> $GITHUB_ENV
          echo "TEST_USER_EMAIL=${{ secrets.TEST_USER_EMAIL }}" >> $GITHUB_ENV

      - name: Wait for deployment to stabilize
        run: |
          echo "Waiting 30 seconds for deployment to stabilize..."
          sleep 30

      - name: Run post-deployment tests
        id: tests
        run: |
          # Run post-deployment tests with appropriate markers
          if [ "${{ inputs.environment }}" = "production" ]; then
            # In production, skip tests that create data
            uv run pytest tests/post_deployment/ \
              -v \
              --tb=short \
              -m "not neo4j" \
              --html=post-deployment-report.html \
              --self-contained-html \
              --junitxml=post-deployment-results.xml
          else
            # In staging, run all tests including database validation
            uv run pytest tests/post_deployment/ \
              -v \
              --tb=short \
              --html=post-deployment-report.html \
              --self-contained-html \
              --junitxml=post-deployment-results.xml
          fi

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: post-deployment-test-results-${{ inputs.environment }}
          path: |
            post-deployment-report.html
            post-deployment-results.xml
          retention-days: 30

      - name: Publish test results
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: post-deployment-results.xml
          check_name: Post-Deployment Tests (${{ inputs.environment }})
          comment_title: Post-Deployment Test Results (${{ inputs.environment }})

      - name: Comment test summary on PR
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const testResults = fs.readFileSync('post-deployment-results.xml', 'utf8');

            // Parse test results (simplified)
            const passed = (testResults.match(/failures="0"/g) || []).length > 0;
            const status = passed ? '✅ PASSED' : '❌ FAILED';

            const comment = `## Post-Deployment Tests ${status}

            **Environment:** ${{ inputs.environment }}
            **API URL:** ${{ inputs.api_base_url }}
            **Frontend URL:** ${{ inputs.frontend_base_url }}

            [View detailed results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Fail workflow if tests failed
        if: steps.tests.outcome == 'failure'
        run: |
          echo "::error::Post-deployment tests failed for ${{ inputs.environment }} environment"
          exit 1

  notify-results:
    name: Notify Test Results
    runs-on: ubuntu-latest
    needs: post-deployment-validation
    if: always()

    steps:
      - name: Determine status
        id: status
        run: |
          if [ "${{ needs.post-deployment-validation.result }}" = "success" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "emoji=✅" >> $GITHUB_OUTPUT
            echo "message=Post-deployment tests passed for ${{ inputs.environment }}" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "emoji=❌" >> $GITHUB_OUTPUT
            echo "message=Post-deployment tests failed for ${{ inputs.environment }}" >> $GITHUB_OUTPUT
          fi

      - name: Send notification (placeholder)
        run: |
          echo "${{ steps.status.outputs.emoji }} ${{ steps.status.outputs.message }}"
          echo "Add notification integration here (Slack, Discord, email, etc.)"

          # Example Slack notification (requires SLACK_WEBHOOK_URL secret):
          # curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
          #   -H 'Content-Type: application/json' \
          #   -d '{
          #     "text": "${{ steps.status.outputs.emoji }} ${{ steps.status.outputs.message }}",
          #     "blocks": [
          #       {
          #         "type": "section",
          #         "text": {
          #           "type": "mrkdwn",
          #           "text": "*Post-Deployment Tests*\n${{ steps.status.outputs.message }}\n\n*Environment:* ${{ inputs.environment }}\n*Run:* <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Results>"
          #         }
          #       }
          #     ]
          #   }'
