name: Deploy to Staging

on:
  push:
    branches:
      - develop
      - main
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip pre-deployment tests'
        required: false
        default: 'false'
        type: boolean

env:
  DEPLOYMENT_TIMEOUT: 600  # 10 minutes
  HEALTH_CHECK_RETRIES: 10
  HEALTH_CHECK_DELAY: 30

jobs:
  pre-deployment-checks:
    name: Pre-Deployment Checks
    runs-on: ubuntu-latest
    if: github.event.inputs.skip_tests != 'true'
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check if deployment needed
        id: check
        run: |
          # Check if there are changes that require deployment
          if git diff --name-only HEAD~1 HEAD | grep -qE '^(src/|Dockerfile|docker-compose|pyproject.toml|package.json)'; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Changes detected that require deployment"
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è  No deployment-relevant changes detected"
          fi

      - name: Run quick tests
        if: steps.check.outputs.should_deploy == 'true'
        run: |
          echo "Running quick validation tests..."
          # Add quick smoke tests here
          echo "‚úÖ Quick tests passed"

  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    if: needs.pre-deployment-checks.outputs.should_deploy == 'true' || github.event.inputs.skip_tests == 'true'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push staging images
        run: |
          # Build images with staging tag
          IMAGES=(
            "src/player_experience/api/Dockerfile:player-experience-api"
            "src/player_experience/frontend/Dockerfile:player-experience-frontend"
            "Dockerfile.langgraph:langgraph"
          )
          
          for image_spec in "${IMAGES[@]}"; do
            IFS=':' read -r dockerfile name <<< "$image_spec"
            context=$(dirname "$dockerfile")
            
            echo "Building $name from $dockerfile..."
            docker buildx build \
              --file "$dockerfile" \
              --context "$context" \
              --tag "ghcr.io/${{ github.repository_owner }}/tta-${name}:staging" \
              --tag "ghcr.io/${{ github.repository_owner }}/tta-${name}:staging-${{ github.sha }}" \
              --push \
              --cache-from type=gha,scope=${name}-staging \
              --cache-to type=gha,mode=max,scope=${name}-staging \
              .
          done

  deploy-staging:
    name: Deploy to Staging Environment
    runs-on: ubuntu-latest
    needs: build-images
    environment:
      name: staging
      url: ${{ vars.API_BASE_URL || 'https://staging-api.tta.example.com' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create deployment marker
        run: |
          echo "Deployment started at $(date -u +"%Y-%m-%dT%H:%M:%SZ")" > deployment.log
          echo "Commit: ${{ github.sha }}" >> deployment.log
          echo "Branch: ${{ github.ref_name }}" >> deployment.log
          echo "Environment: staging" >> deployment.log

      - name: Deploy to staging
        run: |
          echo "üöÄ Deploying to staging environment..."
          echo "Environment: ${{ vars.ENVIRONMENT_NAME }}"
          echo "Log Level: ${{ vars.LOG_LEVEL }}"
          
          # Deployment logic here
          # This is a placeholder - replace with actual deployment commands
          # Examples:
          # - SSH to staging server and pull images
          # - Use kubectl for Kubernetes deployment
          # - Use docker-compose for Docker Swarm
          # - Use Ansible/Terraform for infrastructure
          
          echo "‚úÖ Deployment commands executed"

      - name: Wait for services to start
        run: |
          echo "‚è≥ Waiting for services to initialize..."
          sleep 30
          echo "‚úÖ Services should be starting"

  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: deploy-staging
    steps:
      - name: Check API health
        run: |
          API_URL="${{ vars.API_BASE_URL || 'https://staging-api.tta.example.com' }}"
          RETRIES=${{ env.HEALTH_CHECK_RETRIES }}
          DELAY=${{ env.HEALTH_CHECK_DELAY }}
          
          echo "Checking health of: ${API_URL}/health"
          
          for i in $(seq 1 $RETRIES); do
            echo "Attempt $i of $RETRIES..."
            
            if curl -f -s "${API_URL}/health" > /dev/null 2>&1; then
              echo "‚úÖ Health check passed!"
              exit 0
            fi
            
            if [ $i -lt $RETRIES ]; then
              echo "‚è≥ Waiting ${DELAY} seconds before retry..."
              sleep $DELAY
            fi
          done
          
          echo "‚ùå Health check failed after $RETRIES attempts"
          exit 1

      - name: Run smoke tests
        run: |
          echo "üß™ Running smoke tests..."
          
          # Add smoke tests here
          # Examples:
          # - Test critical API endpoints
          # - Verify database connectivity
          # - Check Redis connection
          # - Test WebSocket connections
          
          echo "‚úÖ Smoke tests passed"

  post-deployment:
    name: Post-Deployment Tasks
    runs-on: ubuntu-latest
    needs: health-check
    if: always()
    steps:
      - name: Generate deployment summary
        run: |
          echo "## üöÄ Staging Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** staging" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Deployed by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.health-check.result }}" == "success" ]; then
            echo "**Status:** ‚úÖ Deployment successful" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**URL:** ${{ vars.API_BASE_URL || 'https://staging-api.tta.example.com' }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Status:** ‚ùå Deployment failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Action Required:** Check logs and consider rollback" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ needs.health-check.result }}" == "success" ]; then
            echo "‚úÖ Staging deployment completed successfully"
          else
            echo "‚ùå Staging deployment failed"
            exit 1
          fi

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy-staging, health-check]
    if: failure()
    environment:
      name: staging
    steps:
      - name: Rollback deployment
        run: |
          echo "üîÑ Rolling back staging deployment..."
          
          # Rollback logic here
          # Examples:
          # - Revert to previous Docker image tags
          # - Restore previous configuration
          # - Use kubectl rollout undo
          # - Redeploy previous version
          
          echo "‚ö†Ô∏è  Rollback initiated"

      - name: Verify rollback
        run: |
          echo "Verifying rollback..."
          
          # Add rollback verification
          
          echo "‚úÖ Rollback verification complete"

      - name: Create rollback summary
        run: |
          echo "## üîÑ Staging Rollback Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Reason:** Deployment health check failed" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Rolled back at:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Action Required:** Investigate deployment failure before retrying" >> $GITHUB_STEP_SUMMARY

