name: Docker Build and Push

on:
  push:
    branches:
      - main
      - develop
    paths:
      - '**/Dockerfile*'
      - 'src/**'
      - 'pyproject.toml'
      - 'package.json'
      - '.github/workflows/docker-build.yml'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - '**/Dockerfile*'
      - 'src/**'
  workflow_dispatch:
    inputs:
      push_images:
        description: 'Push images to registry'
        required: false
        default: 'false'
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ghcr.io/${{ github.repository_owner }}

jobs:
  detect-changes:
    name: Detect Changed Dockerfiles
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      has_changes: ${{ steps.set-matrix.outputs.has_changes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed Dockerfiles
        id: set-matrix
        run: |
          # Define all Dockerfiles to build
          declare -A dockerfiles=(
            ["player-experience-api"]="src/player_experience/api/Dockerfile"
            ["player-experience-frontend"]="src/player_experience/frontend/Dockerfile"
            ["langgraph"]="Dockerfile.langgraph"
            ["developer-api"]="Dockerfile.developer-api"
            ["analytics-reporting"]="src/analytics/Dockerfile.reporting"
            ["analytics-aggregation"]="src/analytics/Dockerfile.aggregation"
            ["analytics-monitoring"]="src/analytics/Dockerfile.monitoring"
          )

          # Check if this is a PR or push event
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            # For PRs, only build changed Dockerfiles
            changed_files=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }})

            builds='[]'
            for name in "${!dockerfiles[@]}"; do
              dockerfile="${dockerfiles[$name]}"
              context=$(dirname "$dockerfile")

              # Check if Dockerfile or its context changed
              if echo "$changed_files" | grep -q "$dockerfile\|$context"; then
                builds=$(echo "$builds" | jq -c ". + [{\"name\": \"$name\", \"dockerfile\": \"$dockerfile\", \"context\": \"$context\"}]")
              fi
            done
          else
            # For push to main/develop, build all Dockerfiles
            builds='[]'
            for name in "${!dockerfiles[@]}"; do
              dockerfile="${dockerfiles[$name]}"
              context=$(dirname "$dockerfile")
              builds=$(echo "$builds" | jq -c ". + [{\"name\": \"$name\", \"dockerfile\": \"$dockerfile\", \"context\": \"$context\"}]")
            done
          fi

          # Check if we have any builds
          if [ "$(echo "$builds" | jq 'length')" -gt 0 ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "matrix={\"include\":$builds}" >> $GITHUB_OUTPUT
            echo "Found $(echo "$builds" | jq 'length') Dockerfiles to build"
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "matrix={\"include\":[]}" >> $GITHUB_OUTPUT
            echo "No Dockerfiles changed"
          fi

  validate-dockerfiles:
    name: Validate Dockerfiles
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.has_changes == 'true'
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate Dockerfile with hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ${{ matrix.dockerfile }}
          failure-threshold: warning
          ignore: DL3008,DL3009,DL3015

      - name: Check Dockerfile exists
        run: |
          if [ ! -f "${{ matrix.dockerfile }}" ]; then
            echo "‚ùå Dockerfile not found: ${{ matrix.dockerfile }}"
            exit 1
          fi
          echo "‚úÖ Dockerfile found: ${{ matrix.dockerfile }}"

  build-and-test:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [detect-changes, validate-dockerfiles]
    if: needs.detect-changes.outputs.has_changes == 'true'
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
      fail-fast: false
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_PREFIX }}/tta-${{ matrix.name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set consistent image tag for build and scan
        id: image-tag
        run: |
          # Use the first tag from metadata for consistency across build/test/scan
          IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
          echo "tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "Using image tag: $IMAGE_TAG"

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: false
          load: true
          tags: ${{ steps.image-tag.outputs.tag }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.name }}
          cache-to: type=gha,mode=max,scope=${{ matrix.name }}
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ github.ref_name }}

      - name: Test Docker image
        run: |
          # Get the first tag from the metadata
          IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)

          echo "Testing image: $IMAGE_TAG"

          # Basic smoke test - check if image exists and can be inspected
          docker image inspect "$IMAGE_TAG" > /dev/null

          # Check image size
          SIZE=$(docker image inspect "$IMAGE_TAG" --format='{{.Size}}' | awk '{print $1/1024/1024}')
          echo "Image size: ${SIZE}MB"

          # Warn if image is too large (>2GB)
          if (( $(echo "$SIZE > 2048" | bc -l) )); then
            echo "‚ö†Ô∏è  Warning: Image size is larger than 2GB"
          fi

      - name: Scan image for vulnerabilities
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ steps.image-tag.outputs.tag }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.name }}.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.name }}.sarif'
          category: docker-${{ matrix.name }}

      - name: Push Docker image
        if: |
          github.event_name != 'pull_request' &&
          (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' ||
           github.event.inputs.push_images == 'true')
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.name }}
          cache-to: type=gha,mode=max,scope=${{ matrix.name }}
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ github.ref_name }}

  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [detect-changes, build-and-test]
    if: always()
    steps:
      - name: Generate summary
        run: |
          echo "## üê≥ Docker Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.detect-changes.outputs.has_changes }}" == "true" ]; then
            echo "### Built Images" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            if [ "${{ needs.build-and-test.result }}" == "success" ]; then
              echo "‚úÖ All Docker images built successfully" >> $GITHUB_STEP_SUMMARY
            elif [ "${{ needs.build-and-test.result }}" == "failure" ]; then
              echo "‚ùå Some Docker images failed to build" >> $GITHUB_STEP_SUMMARY
            else
              echo "‚ö†Ô∏è  Docker build status: ${{ needs.build-and-test.result }}" >> $GITHUB_STEP_SUMMARY
            fi

            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Registry:** ${{ env.REGISTRY }}" >> $GITHUB_STEP_SUMMARY
            echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
            echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ÑπÔ∏è  No Dockerfile changes detected" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Check build status
        if: needs.build-and-test.result == 'failure'
        run: |
          echo "‚ùå Docker build failed"
          exit 1
