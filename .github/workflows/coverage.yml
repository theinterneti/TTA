name: Coverage Report

on:
  push:
    branches:
      - main
      - staging
      - develop
  pull_request:
    branches:
      - main
      - staging
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.12'

jobs:
  # Detect branch tier for tier-based coverage thresholds
  tier:
    uses: ./.github/workflows/templates/determine-tier.yml

  coverage:
    name: Generate and Upload Coverage
    runs-on: ubuntu-latest
    needs: tier
    timeout-minutes: 20

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      neo4j:
        image: neo4j:5-community
        ports:
          - 7687:7687
          - 7474:7474
        env:
          NEO4J_AUTH: neo4j/tta_ci_password_2024
          NEO4J_PLUGINS: '["apoc"]'
          NEO4J_dbms_security_procedures_unrestricted: apoc.*
          NEO4J_dbms_security_procedures_allowlist: apoc.*
        options: >-
          --health-cmd "cypher-shell -u neo4j -p tta_ci_password_2024 'RETURN 1'"
          --health-interval 10s
          --health-timeout 10s
          --health-retries 10
          --health-start-period 40s

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better blame info

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Cache uv dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml', '**/uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Install dependencies
        run: uv sync --all-extras

      - name: Wait for services to be ready
        run: |
          echo "Waiting for Redis..."
          timeout 30 bash -c 'until redis-cli -h localhost ping; do sleep 1; done'
          echo "‚úÖ Redis is ready"

          echo "Waiting for Neo4j..."
          timeout 60 bash -c 'until curl -s http://localhost:7474 > /dev/null; do sleep 2; done'
          echo "‚úÖ Neo4j is ready"

      - name: Run tests with coverage
        run: |
          uv run pytest tests/ \
            --cov=src \
            --cov-report=xml \
            --cov-report=term \
            --cov-report=html \
            --cov-branch \
            -v
        env:
          REDIS_URL: redis://localhost:6379
          NEO4J_URI: bolt://localhost:7687
          NEO4J_AUTH_USER: neo4j
          NEO4J_AUTH_PASSWORD: tta_ci_password_2024  # pragma: allowlist secret
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          CI: true

      - name: Check coverage threshold (tier-based)
        run: |
          COVERAGE=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); print(f\"{float(root.attrib['line-rate']) * 100:.2f}\")")
          echo "Coverage: $COVERAGE%"
          echo "Branch Tier: ${{ needs.tier.outputs.tier }}"

          # Tier-based thresholds
          TIER="${{ needs.tier.outputs.tier }}"

          if [[ "$TIER" == "1" ]]; then
            echo "‚úÖ Tier 1 (Experimental): No coverage threshold"
            exit 0
          elif [[ "$TIER" == "2" ]]; then
            THRESHOLD=60
          elif [[ "$TIER" == "3" ]]; then
            THRESHOLD=70
          else
            THRESHOLD=85
          fi

          echo "Required threshold for tier $TIER: $THRESHOLD%"

          if (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
            echo "‚ùå Coverage $COVERAGE% is below threshold $THRESHOLD%"
            exit 1
          else
            echo "‚úÖ Coverage $COVERAGE% meets threshold $THRESHOLD%"
          fi

      - name: Upload coverage to Codecov
        if: always()  # Upload even if threshold check fails
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          flags: unit,integration,tier-${{ needs.tier.outputs.tier }}
          name: tta-coverage-tier-${{ needs.tier.outputs.tier }}
          fail_ci_if_error: false
          verbose: true

      - name: Generate coverage badge
        if: github.ref == 'refs/heads/main'
        run: |
          COVERAGE=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); print(f\"{float(root.attrib['line-rate']) * 100:.1f}\")")
          echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV
          echo "Coverage: $COVERAGE%"

      - name: Upload HTML coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/
          retention-days: 30

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const xml = fs.readFileSync('coverage.xml', 'utf8');
            const match = xml.match(/line-rate="([0-9.]+)"/);
            const coverage = match ? (parseFloat(match[1]) * 100).toFixed(2) : 'N/A';

            const tier = '${{ needs.tier.outputs.tier }}';
            const tierName = '${{ needs.tier.outputs.tier_name }}';

            // Tier-based thresholds
            const thresholds = {
              '1': { threshold: 0, label: 'None (informational)' },
              '2': { threshold: 60, label: '‚â•60%' },
              '3': { threshold: 70, label: '‚â•70%' },
              '4': { threshold: 85, label: '‚â•85%' }
            };

            const tierInfo = thresholds[tier] || thresholds['1'];
            const meetsThreshold = tier === '1' || parseFloat(coverage) >= tierInfo.threshold;
            const statusIcon = meetsThreshold ? '‚úÖ' : '‚ùå';

            const comment = `## üìä Coverage Report

            **Branch Tier**: ${tier} - ${tierName}
            **Overall Coverage**: ${coverage}% ${statusIcon}
            **Required Threshold**: ${tierInfo.label}

            ${meetsThreshold ? '‚úÖ Coverage meets threshold for this tier' : '‚ùå Coverage below threshold - please add tests'}

            <details>
            <summary>View detailed coverage report</summary>

            Download the coverage HTML report from the workflow artifacts for detailed line-by-line coverage.

            </details>

            **Coverage Targets by Tier**:
            - Tier 1 (Experimental): No threshold - informational only
            - Tier 2 (Development): ‚â•60% coverage required
            - Tier 3 (Staging): ‚â•70% coverage required
            - Tier 4 (Production): ‚â•85% coverage required
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Coverage summary
        if: always()
        run: |
          echo "## üìä Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch Tier**: ${{ needs.tier.outputs.tier }} - ${{ needs.tier.outputs.tier_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f coverage.xml ]; then
            COVERAGE=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); print(f\"{float(root.attrib['line-rate']) * 100:.2f}\")")
            echo "**Overall Coverage**: ${COVERAGE}%" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            # Tier-based threshold check
            TIER="${{ needs.tier.outputs.tier }}"

            if [[ "$TIER" == "1" ]]; then
              echo "**Required Threshold**: None (informational only)" >> $GITHUB_STEP_SUMMARY
              echo "‚úÖ Experimental branch - coverage tracking only" >> $GITHUB_STEP_SUMMARY
            elif [[ "$TIER" == "2" ]]; then
              echo "**Required Threshold**: ‚â•60%" >> $GITHUB_STEP_SUMMARY
              if (( $(echo "$COVERAGE >= 60" | bc -l) )); then
                echo "‚úÖ Coverage meets tier 2 threshold" >> $GITHUB_STEP_SUMMARY
              else
                echo "‚ùå Coverage below tier 2 threshold (60%)" >> $GITHUB_STEP_SUMMARY
              fi
            elif [[ "$TIER" == "3" ]]; then
              echo "**Required Threshold**: ‚â•70%" >> $GITHUB_STEP_SUMMARY
              if (( $(echo "$COVERAGE >= 70" | bc -l) )); then
                echo "‚úÖ Coverage meets tier 3 threshold" >> $GITHUB_STEP_SUMMARY
              else
                echo "‚ùå Coverage below tier 3 threshold (70%)" >> $GITHUB_STEP_SUMMARY
              fi
            else
              echo "**Required Threshold**: ‚â•85%" >> $GITHUB_STEP_SUMMARY
              if (( $(echo "$COVERAGE >= 85" | bc -l) )); then
                echo "‚úÖ Coverage meets tier 4 threshold" >> $GITHUB_STEP_SUMMARY
              else
                echo "‚ùå Coverage below tier 4 threshold (85%)" >> $GITHUB_STEP_SUMMARY
              fi
            fi

            echo "" >> $GITHUB_STEP_SUMMARY
            echo "View the [interactive coverage report](https://app.codecov.io/gh/${{ github.repository }}) on Codecov" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è Coverage report not generated" >> $GITHUB_STEP_SUMMARY
          fi
