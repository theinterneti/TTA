name: Monorepo CI/CD

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"
  UV_VERSION: "0.1.0"

jobs:
  detect-changes:
    name: Detect Changed Packages
    runs-on: ubuntu-latest
    outputs:
      tta-ai-framework: ${{ steps.filter.outputs.tta-ai-framework }}
      tta-narrative-engine: ${{ steps.filter.outputs.tta-narrative-engine }}
      tta-app: ${{ steps.filter.outputs.tta-app }}
      any-changes: ${{ steps.filter.outputs.any-changes }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed files
        id: filter
        run: |
          # Get changed files
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)
          else
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          fi

          echo "Changed files:"
          echo "$CHANGED_FILES"

          # Check each package
          if echo "$CHANGED_FILES" | grep -q "^packages/tta-ai-framework/"; then
            echo "tta-ai-framework=true" >> $GITHUB_OUTPUT
          else
            echo "tta-ai-framework=false" >> $GITHUB_OUTPUT
          fi

          if echo "$CHANGED_FILES" | grep -q "^packages/tta-narrative-engine/"; then
            echo "tta-narrative-engine=true" >> $GITHUB_OUTPUT
          else
            echo "tta-narrative-engine=false" >> $GITHUB_OUTPUT
          fi

          if echo "$CHANGED_FILES" | grep -q "^src/"; then
            echo "tta-app=true" >> $GITHUB_OUTPUT
          else
            echo "tta-app=false" >> $GITHUB_OUTPUT
          fi

          # Check if any package changed
          if echo "$CHANGED_FILES" | grep -qE "^(packages/|src/)"; then
            echo "any-changes=true" >> $GITHUB_OUTPUT
          else
            echo "any-changes=false" >> $GITHUB_OUTPUT
          fi

  test-tta-ai-framework:
    name: Test TTA AI Framework
    needs: detect-changes
    if: needs.detect-changes.outputs.tta-ai-framework == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Cache UV dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: uv-${{ runner.os }}-py${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            uv-${{ runner.os }}-py${{ matrix.python-version }}-

      - name: Install dependencies
        run: |
          uv venv
          source .venv/bin/activate
          uv pip install -e "packages/tta-ai-framework[dev]"

      - name: Run linting
        run: |
          source .venv/bin/activate
          uvx ruff check packages/tta-ai-framework/

      - name: Run type checking
        run: |
          source .venv/bin/activate
          uvx pyright packages/tta-ai-framework/

      - name: Run tests with coverage
        run: |
          source .venv/bin/activate
          uvx pytest packages/tta-ai-framework/tests/ \
            --cov=packages/tta-ai-framework/src/tta_ai \
            --cov-branch \
            --cov-report=xml \
            --cov-report=term \
            --cov-fail-under=70

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          flags: tta-ai-framework
          name: tta-ai-framework-py${{ matrix.python-version }}
          fail_ci_if_error: false

  test-tta-narrative-engine:
    name: Test TTA Narrative Engine
    needs: detect-changes
    if: needs.detect-changes.outputs.tta-narrative-engine == 'true' || needs.detect-changes.outputs.tta-ai-framework == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Cache UV dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: uv-${{ runner.os }}-py${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            uv-${{ runner.os }}-py${{ matrix.python-version }}-

      - name: Install dependencies
        run: |
          uv venv
          source .venv/bin/activate
          uv pip install -e "packages/tta-ai-framework[dev]"
          uv pip install -e "packages/tta-narrative-engine[dev]"

      - name: Run linting
        run: |
          source .venv/bin/activate
          uvx ruff check packages/tta-narrative-engine/

      - name: Run type checking
        run: |
          source .venv/bin/activate
          uvx pyright packages/tta-narrative-engine/

      - name: Run tests with coverage
        run: |
          source .venv/bin/activate
          uvx pytest packages/tta-narrative-engine/tests/ \
            --cov=packages/tta-narrative-engine/src/tta_narrative \
            --cov-branch \
            --cov-report=xml \
            --cov-report=term \
            --cov-fail-under=70

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          flags: tta-narrative-engine
          name: tta-narrative-engine-py${{ matrix.python-version }}
          fail_ci_if_error: false

  test-tta-app:
    name: Test TTA Application
    needs: detect-changes
    if: needs.detect-changes.outputs.tta-app == 'true' || needs.detect-changes.outputs.tta-ai-framework == 'true' || needs.detect-changes.outputs.tta-narrative-engine == 'true'
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      neo4j:
        image: neo4j:5-community
        ports:
          - 7687:7687
          - 7474:7474
        env:
          NEO4J_AUTH: neo4j/testpassword
          NEO4J_PLUGINS: '["apoc"]'
        options: >-
          --health-cmd "cypher-shell -u neo4j -p testpassword 'RETURN 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Cache UV dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: uv-${{ runner.os }}-py${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            uv-${{ runner.os }}-py${{ matrix.python-version }}-

      - name: Install dependencies
        run: |
          uv venv
          source .venv/bin/activate
          uv pip install -e ".[dev]"

      - name: Run linting
        run: |
          source .venv/bin/activate
          uvx ruff check src/

      - name: Run type checking
        run: |
          source .venv/bin/activate
          uvx pyright src/

      - name: Run unit tests
        env:
          REDIS_URL: redis://localhost:6379
          NEO4J_URI: bolt://localhost:7687
          NEO4J_USER: neo4j
          NEO4J_PASSWORD: testpassword  # pragma: allowlist secret
        run: |
          source .venv/bin/activate
          uvx pytest tests/unit/ \
            --cov=src \
            --cov-branch \
            --cov-report=xml \
            --cov-report=term \
            --cov-fail-under=60

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          flags: tta-app
          name: tta-app-py${{ matrix.python-version }}
          fail_ci_if_error: false

  quality-gates:
    name: Quality Gates
    needs: [detect-changes, test-tta-ai-framework, test-tta-narrative-engine, test-tta-app]
    if: always() && needs.detect-changes.outputs.any-changes == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Check test results
        run: |
          if [ "${{ needs.test-tta-ai-framework.result }}" == "failure" ] || \
             [ "${{ needs.test-tta-narrative-engine.result }}" == "failure" ] || \
             [ "${{ needs.test-tta-app.result }}" == "failure" ]; then
            echo "❌ Quality gates failed: One or more test jobs failed"
            exit 1
          fi
          echo "✅ All quality gates passed"
