name: Component Status Report

on:
  schedule:
    # Run daily at 00:00 UTC
    - cron: '0 0 * * *'
  workflow_dispatch:
  push:
    branches:
      - main
      - staging
    paths:
      - 'src/components/**'
      - 'tests/**'

permissions:
  contents: read
  issues: write

jobs:
  generate-component-status:
    name: Generate Component Status Report
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install UV
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Sync dependencies
        run: |
          # Sync project dependencies + dev group (includes pytest)
          # UV automatically syncs the 'dev' group by default
          uv sync
          echo "Verifying pytest installation..."
          uv pip list | grep pytest

      - name: Debug test environment
        run: |
          echo "UV version:"
          uv --version
          echo ""
          echo "Python version:"
          python --version
          echo ""
          echo "Installed packages (pytest-related):"
          uv pip list | grep pytest || echo "No pytest packages found"
          echo ""
          echo "Pytest location check:"
          uv run which pytest || echo "pytest not found via 'uv run which'"
          echo ""
          echo "Direct pytest check:"
          uv run pytest --version || echo "pytest --version failed"

      - name: Run tests with coverage for all components
        run: |
          mkdir -p component-reports

          # Debug: Test with Neo4j first to verify coverage works
          echo "=== Testing Neo4j with coverage (debug) ==="
          uv run pytest tests/ \
            --cov="src/components/neo4j_component.py" \
            --cov-report=json:component-reports/Neo4j_coverage.json \
            --cov-report=term \
            -v || echo "Neo4j tests completed with errors (continuing)"

          # Debug: Check if coverage file was created
          echo ""
          echo "=== Checking for coverage file ==="
          ls -la component-reports/ || echo "component-reports directory is empty"

          if [ -f "component-reports/Neo4j_coverage.json" ]; then
            echo "✓ Coverage file created successfully!"
            echo "File size: $(stat -c%s component-reports/Neo4j_coverage.json 2>/dev/null || stat -f%z component-reports/Neo4j_coverage.json)"
            echo "First 500 characters:"
            head -c 500 component-reports/Neo4j_coverage.json
          else
            echo "✗ ERROR: Coverage file not created!"
            echo "Checking pytest-cov installation:"
            uv pip show pytest-cov
          fi

          echo ""
          echo "=== Running full component coverage collection ==="

          # Define components and their paths
          declare -A components=(
            ["Neo4j"]="src/components/neo4j_component.py"
            ["Docker"]="src/components/docker_component.py"
            ["Carbon"]="src/components/carbon_component.py"
            ["Model Management"]="src/components/model_management/"
            ["LLM"]="src/components/llm_component.py"
            ["Agent Orchestration"]="src/components/agent_orchestration_component.py"
            ["Narrative Arc Orchestrator"]="src/components/narrative_arc_orchestrator/"
            ["Gameplay Loop"]="src/components/gameplay_loop/"
            ["Character Arc Manager"]="src/components/character_arc_manager.py"
            ["Player Experience"]="src/components/player_experience_component.py"
            ["Narrative Coherence"]="src/components/narrative_coherence/"
            ["Therapeutic Systems"]="src/components/therapeutic_systems_enhanced/"
          )

          # Run tests for each component
          for component in "${!components[@]}"; do
            path="${components[$component]}"
            echo "Testing $component..."

            # Run tests with coverage (using project environment)
            uv run pytest tests/ \
              --cov="$path" \
              --cov-report=json:component-reports/${component// /_}_coverage.json \
              --cov-report=term \
              -v || true

            # Verify coverage file was created
            coverage_file="component-reports/${component// /_}_coverage.json"
            if [ -f "$coverage_file" ]; then
              echo "  ✓ Coverage file created for $component"
            else
              echo "  ✗ WARNING: No coverage file for $component"
            fi
          done

          # Final summary
          echo ""
          echo "=== Coverage Collection Summary ==="
          echo "Files created:"
          ls -lh component-reports/ || echo "No files created"

      - name: Generate status report
        id: report
        run: |
          python << 'EOF'
          import json
          import os
          from pathlib import Path
          from datetime import datetime

          # Component functional groups
          FUNCTIONAL_GROUPS = {
              "Core Infrastructure": ["Neo4j", "Docker", "Carbon"],
              "AI/Agent Systems": ["Model Management", "LLM", "Agent Orchestration", "Narrative Arc Orchestrator"],
              "Player Experience": ["Gameplay Loop", "Character Arc Manager", "Player Experience"],
              "Therapeutic Content": ["Narrative Coherence", "Therapeutic Systems"]
          }

          # Maturity stage thresholds
          DEV_TO_STAGING_THRESHOLD = 70.0
          STAGING_TO_PRODUCTION_THRESHOLD = 80.0

          # Read coverage data
          report_dir = Path("component-reports")
          component_status = {}

          for coverage_file in report_dir.glob("*_coverage.json"):
              component_name = coverage_file.stem.replace("_coverage", "").replace("_", " ")

              try:
                  with open(coverage_file) as f:
                      data = json.load(f)
                      coverage = data["totals"]["percent_covered"]
                      component_status[component_name] = {
                          "coverage": coverage,
                          "ready_for_staging": coverage >= DEV_TO_STAGING_THRESHOLD,
                          "ready_for_production": coverage >= STAGING_TO_PRODUCTION_THRESHOLD
                      }
              except Exception as e:
                  print(f"Error reading coverage for {component_name}: {e}")
                  component_status[component_name] = {
                      "coverage": 0.0,
                      "ready_for_staging": False,
                      "ready_for_production": False
                  }

          # Validation: Ensure we collected some coverage data
          if len(component_status) == 0:
              print("WARNING: No coverage data collected!")
              print("This likely means pytest failed to run properly.")
              print("Check that 'uv run pytest' is being used (not 'uvx pytest').")

          # Validation: Check if all components show 0% (likely indicates pytest issue)
          if len(component_status) > 0 and all(s["coverage"] == 0.0 for s in component_status.values()):
              print("WARNING: All components show 0% coverage!")
              print("This likely means pytest is running in wrong environment.")
              print("Verify 'uv run pytest' is being used to access project dependencies.")

          # Generate markdown report
          report = f"# TTA Component Status Report\n\n"
          report += f"**Generated**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}\n\n"
          report += f"---\n\n"

          # Summary statistics
          total_components = len(component_status)
          ready_for_staging = sum(1 for s in component_status.values() if s["ready_for_staging"])
          ready_for_production = sum(1 for s in component_status.values() if s["ready_for_production"])
          avg_coverage = sum(s["coverage"] for s in component_status.values()) / total_components if total_components > 0 else 0

          report += f"## Summary\n\n"
          report += f"| Metric | Value |\n"
          report += f"|--------|-------|\n"
          report += f"| Total Components | {total_components} |\n"
          report += f"| Average Coverage | {avg_coverage:.1f}% |\n"
          report += f"| Ready for Staging (≥70%) | {ready_for_staging} |\n"
          report += f"| Ready for Production (≥80%) | {ready_for_production} |\n\n"

          # Component status by functional group
          for group, components in FUNCTIONAL_GROUPS.items():
              report += f"## {group}\n\n"
              report += f"| Component | Coverage | Status |\n"
              report += f"|-----------|----------|--------|\n"

              for component in components:
                  if component in component_status:
                      status = component_status[component]
                      coverage = status["coverage"]

                      if status["ready_for_production"]:
                          status_icon = "🟢 Production Ready"
                      elif status["ready_for_staging"]:
                          status_icon = "🟡 Staging Ready"
                      else:
                          status_icon = "🔴 Development"

                      report += f"| {component} | {coverage:.1f}% | {status_icon} |\n"
                  else:
                      report += f"| {component} | N/A | ⚪ No Data |\n"

              report += f"\n"

          # Promotion recommendations
          report += f"## Promotion Recommendations\n\n"

          staging_candidates = [c for c, s in component_status.items() if s["ready_for_staging"] and not s["ready_for_production"]]
          production_candidates = [c for c, s in component_status.items() if s["ready_for_production"]]

          if production_candidates:
              report += f"### Ready for Production\n\n"
              for component in production_candidates:
                  report += f"- ✅ **{component}** ({component_status[component]['coverage']:.1f}% coverage)\n"
              report += f"\n"

          if staging_candidates:
              report += f"### Ready for Staging\n\n"
              for component in staging_candidates:
                  report += f"- ✅ **{component}** ({component_status[component]['coverage']:.1f}% coverage)\n"
              report += f"\n"

          needs_work = [c for c, s in component_status.items() if not s["ready_for_staging"]]
          if needs_work:
              report += f"### Needs Work (< 70% coverage)\n\n"
              for component in needs_work:
                  coverage = component_status[component]['coverage']
                  gap = DEV_TO_STAGING_THRESHOLD - coverage
                  report += f"- ⚠️ **{component}** ({coverage:.1f}% coverage, {gap:.1f}% gap)\n"
              report += f"\n"

          # Save report
          with open("component-status-report.md", "w") as f:
              f.write(report)

          print(report)

          # Set output for GitHub Actions
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"total_components={total_components}\n")
              f.write(f"ready_for_staging={ready_for_staging}\n")
              f.write(f"ready_for_production={ready_for_production}\n")
              f.write(f"avg_coverage={avg_coverage:.1f}\n")
          EOF

      - name: Upload status report
        uses: actions/upload-artifact@v4
        with:
          name: component-status-report
          path: component-status-report.md

      - name: Post summary to workflow
        run: |
          cat component-status-report.md >> $GITHUB_STEP_SUMMARY

      - name: Create or update status issue
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('component-status-report.md', 'utf8');

            // Search for existing status issue
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'component-status-report',
              state: 'open'
            });

            const issueBody = report + '\n\n---\n\n*This report is automatically generated daily. Last updated: ' + new Date().toISOString() + '*';

            if (issues.data.length > 0) {
              // Update existing issue
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issues.data[0].number,
                body: issueBody
              });

              console.log(`Updated existing status issue #${issues.data[0].number}`);
            } else {
              // Create new issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: '📊 Component Status Report',
                body: issueBody,
                labels: ['component-status-report', 'documentation']
              });

              console.log('Created new status issue');
            }
