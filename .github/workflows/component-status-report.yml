name: Component Status Report

on:
  schedule:
    # Run daily at 00:00 UTC
    - cron: '0 0 * * *'
  workflow_dispatch:
  push:
    branches:
      - main
      - staging
    paths:
      - 'src/components/**'
      - 'tests/**'

permissions:
  contents: read
  issues: write

jobs:
  generate-component-status:
    name: Generate Component Status Report
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install UV
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Sync dependencies
        run: |
          # Sync project dependencies + dev group (includes pytest)
          # UV automatically syncs the 'dev' group by default
          uv sync
          echo "Verifying pytest installation..."
          uv pip list | grep pytest

      - name: Debug test environment
        run: |
          echo "UV version:"
          uv --version
          echo ""
          echo "Python version:"
          python --version
          echo ""
          echo "Installed packages (pytest-related):"
          uv pip list | grep pytest || echo "No pytest packages found"
          echo ""
          echo "Pytest location check:"
          uv run which pytest || echo "pytest not found via 'uv run which'"
          echo ""
          echo "Direct pytest check:"
          uv run pytest --version || echo "pytest --version failed"

      - name: Run tests with coverage for all components
        run: |
          mkdir -p component-reports

          # Debug: Test with Neo4j first to verify coverage works
          echo "=== Testing Neo4j with coverage (debug) ==="
          uv run pytest tests/ \
            --cov="src/components/neo4j_component.py" \
            --cov-report=json:component-reports/Neo4j_coverage.json \
            --cov-report=term \
            -v || echo "Neo4j tests completed with errors (continuing)"

          # Debug: Check if coverage file was created
          echo ""
          echo "=== Checking for coverage file ==="
          ls -la component-reports/ || echo "component-reports directory is empty"

          if [ -f "component-reports/Neo4j_coverage.json" ]; then
            echo "✓ Coverage file created successfully!"
            echo "File size: $(stat -c%s component-reports/Neo4j_coverage.json 2>/dev/null || stat -f%z component-reports/Neo4j_coverage.json)"
            echo "First 500 characters:"
            head -c 500 component-reports/Neo4j_coverage.json
          else
            echo "✗ ERROR: Coverage file not created!"
            echo "Checking pytest-cov installation:"
            uv pip show pytest-cov
          fi

          echo ""
          echo "=== Running full component coverage collection ==="

          # Define components and their paths
          declare -A components=(
            ["Neo4j"]="src/components/neo4j_component.py"
            ["Docker"]="src/components/docker_component.py"
            ["Carbon"]="src/components/carbon_component.py"
            ["Model Management"]="src/components/model_management/"
            ["LLM"]="src/components/llm_component.py"
            ["Agent Orchestration"]="src/components/agent_orchestration_component.py"
            ["Narrative Arc Orchestrator"]="src/components/narrative_arc_orchestrator/"
            ["Gameplay Loop"]="src/components/gameplay_loop/"
            ["Character Arc Manager"]="src/components/character_arc_manager.py"
            ["Player Experience"]="src/components/player_experience_component.py"
            ["Narrative Coherence"]="src/components/narrative_coherence/"
            ["Therapeutic Systems"]="src/components/therapeutic_systems_enhanced/"
          )

          # Run tests for each component
          for component in "${!components[@]}"; do
            path="${components[$component]}"
            echo "Testing $component..."

            # Run tests with coverage (using project environment)
            uv run pytest tests/ \
              --cov="$path" \
              --cov-report=json:component-reports/${component// /_}_coverage.json \
              --cov-report=term \
              -v || true

            # Verify coverage file was created
            coverage_file="component-reports/${component// /_}_coverage.json"
            if [ -f "$coverage_file" ]; then
              echo "  ✓ Coverage file created for $component"
            else
              echo "  ✗ WARNING: No coverage file for $component"
            fi
          done

          # Final summary
          echo ""
          echo "=== Coverage Collection Summary ==="
          echo "Files created:"
          ls -lh component-reports/ || echo "No files created"

      - name: Run enhanced component analysis
        run: |
          echo "Running enhanced component maturity analysis..."
          uv run python scripts/analyze-component-maturity.py

          # Verify JSON output was created
          if [ -f "component-maturity-analysis.json" ]; then
            echo "✓ Analysis complete! JSON file created."
            echo "File size: $(stat -c%s component-maturity-analysis.json 2>/dev/null || stat -f%z component-maturity-analysis.json)"
          else
            echo "✗ WARNING: Analysis JSON not created!"
          fi

      - name: Generate status report
        id: report
        run: |
          python << 'EOF'
          import json
          import os
          from pathlib import Path
          from datetime import datetime

          # Read enhanced component analysis data
          try:
              with open("component-maturity-analysis.json") as f:
                  analysis_data = json.load(f)
          except FileNotFoundError:
              print("ERROR: component-maturity-analysis.json not found!")
              print("The enhanced analysis script may have failed.")
              analysis_data = {}

          # Flatten component data for easier access
          all_components = {}
          for group_name, components in analysis_data.items():
              for component_name, component_data in components.items():
                  all_components[component_name] = {
                      **component_data,
                      "functional_group": group_name
                  }

          # Validation
          if len(all_components) == 0:
              print("WARNING: No component data found!")
              print("Check that the analysis script ran successfully.")

          # Generate markdown report
          report = f"# TTA Component Status Report\n\n"
          report += f"**Generated**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}\n\n"
          report += f"---\n\n"

          # Summary statistics
          total_components = len(all_components)
          in_production = sum(1 for c in all_components.values() if c.get("current_stage") == "Production")
          in_staging = sum(1 for c in all_components.values() if c.get("current_stage") == "Staging")
          in_development = sum(1 for c in all_components.values() if c.get("current_stage") == "Development")
          ready_for_staging = sum(1 for c in all_components.values() if c.get("ready_for_staging", False) and c.get("current_stage") == "Development")
          ready_for_production = sum(1 for c in all_components.values() if c.get("ready_for_production", False) and c.get("current_stage") == "Staging")

          avg_coverage = 0
          if total_components > 0:
              total_cov = sum(c.get("coverage", {}).get("coverage", 0) for c in all_components.values())
              avg_coverage = total_cov / total_components

          report += f"## Summary\n\n"
          report += f"| Metric | Value |\n"
          report += f"|--------|-------|\n"
          report += f"| Total Components | {total_components} |\n"
          report += f"| In Production | {in_production} |\n"
          report += f"| In Staging | {in_staging} |\n"
          report += f"| In Development | {in_development} |\n"
          report += f"| Average Coverage | {avg_coverage:.1f}% |\n"
          report += f"| Ready for Staging (from Dev) | {ready_for_staging} |\n"
          report += f"| Ready for Production (from Staging) | {ready_for_production} |\n\n"

          # Staging components with observation periods
          staging_components = {name: data for name, data in all_components.items() if data.get("current_stage") == "Staging"}
          if staging_components:
              report += f"## Staging Components (7-Day Observation)\n\n"
              report += f"| Component | Deployed | Days Remaining | Coverage | Blockers | Status |\n"
              report += f"|-----------|----------|----------------|----------|----------|--------|\n"

              for name, data in staging_components.items():
                  obs = data.get("observation_period")
                  coverage = data.get("coverage", {}).get("coverage", 0)
                  blocker_count = data.get("blocker_count", 0)
                  blocker_issues = data.get("blocker_issues", [])

                  if obs:
                      deployed = obs.get("deployed", "N/A")
                      days_remaining = obs.get("days_remaining", 0)

                      # Status icon
                      if blocker_count > 0 or blocker_issues:
                          status_icon = "⚠️ Blocked"
                      elif days_remaining > 0:
                          status_icon = "⏳ In Progress"
                      else:
                          status_icon = "✅ Complete"

                      # Blocker summary
                      if blocker_issues:
                          blocker_text = ", ".join([b.get("issue", "") for b in blocker_issues[:2]])
                          if len(blocker_issues) > 2:
                              blocker_text += f" +{len(blocker_issues)-2} more"
                      elif blocker_count > 0:
                          blocker_text = f"{blocker_count} issues"
                      else:
                          blocker_text = "None"

                      report += f"| {name} | {deployed} | {days_remaining} days | {coverage:.1f}% | {blocker_text} | {status_icon} |\n"
                  else:
                      report += f"| {name} | N/A | N/A | {coverage:.1f}% | - | ⚠️ No obs. data |\n"

              report += f"\n"

          # Component status by functional group
          for group_name, components in analysis_data.items():
              report += f"## {group_name}\n\n"
              report += f"| Component | Stage | Coverage | Linting | Type Check | Security | Status |\n"
              report += f"|-----------|-------|----------|---------|------------|----------|--------|\n"

              for component_name, data in components.items():
                  stage = data.get("current_stage", "Development")
                  coverage = data.get("coverage", {}).get("coverage", 0)

                  # Code quality status
                  quality = data.get("quality", {})
                  linting = quality.get("linting", {})
                  type_check = quality.get("type_checking", {})
                  security = quality.get("security", {})

                  lint_icon = "✅" if linting.get("passed", False) else f"❌ {linting.get('issues', 0)}"
                  type_icon = "✅" if type_check.get("passed", False) else "❌"
                  sec_icon = "✅" if security.get("passed", False) else "❌"

                  # Overall status
                  if data.get("ready_for_production", False):
                      status_icon = "🟢 Ready for Prod"
                  elif data.get("ready_for_staging", False) and stage == "Development":
                      status_icon = "🟡 Ready for Staging"
                  elif stage == "Staging":
                      status_icon = "🟡 In Staging"
                  elif stage == "Production":
                      status_icon = "🟢 Production"
                  else:
                      status_icon = "🔴 Development"

                  report += f"| {component_name} | {stage} | {coverage:.1f}% | {lint_icon} | {type_icon} | {sec_icon} | {status_icon} |\n"

              report += f"\n"

          # Promotion recommendations
          report += f"## Promotion Recommendations\n\n"

          # Ready for production (from staging)
          production_candidates = [(name, data) for name, data in all_components.items()
                                   if data.get("ready_for_production", False) and data.get("current_stage") == "Staging"]

          if production_candidates:
              report += f"### Ready for Production\n\n"
              for name, data in production_candidates:
                  coverage = data.get("coverage", {}).get("coverage", 0)
                  obs = data.get("observation_period", {})
                  obs_status = "✅ Complete" if obs and obs.get("complete", False) else "⏳ In progress"
                  report += f"- ✅ **{name}** ({coverage:.1f}% coverage, observation: {obs_status})\n"
              report += f"\n"

          # Ready for staging (from development)
          staging_candidates = [(name, data) for name, data in all_components.items()
                                if data.get("ready_for_staging", False) and data.get("current_stage") == "Development"]

          if staging_candidates:
              report += f"### Ready for Staging\n\n"
              for name, data in staging_candidates:
                  coverage = data.get("coverage", {}).get("coverage", 0)
                  report += f"- ✅ **{name}** ({coverage:.1f}% coverage, all checks passing)\n"
              report += f"\n"

          # Components with blockers
          blocked_components = [(name, data) for name, data in all_components.items()
                                if data.get("blocker_count", 0) > 0 or data.get("blocker_issues", [])]

          if blocked_components:
              report += f"### Active Blockers\n\n"
              for name, data in blocked_components:
                  stage = data.get("current_stage", "Development")
                  blockers = data.get("blockers", [])
                  blocker_issues = data.get("blocker_issues", [])

                  report += f"#### {name} ({stage})\n\n"

                  # Automated blockers
                  for blocker in blockers:
                      report += f"- ❌ {blocker.get('description', 'Unknown blocker')}\n"

                  # Issue-based blockers
                  for issue in blocker_issues:
                      issue_num = issue.get("issue", "")
                      desc = issue.get("description", "See issue for details")
                      report += f"- ⚠️ **{issue_num}**: {desc}\n"

                  report += f"\n"

          # Needs work (development components not ready)
          needs_work = [(name, data) for name, data in all_components.items()
                        if not data.get("ready_for_staging", False) and data.get("current_stage") == "Development"]

          if needs_work:
              report += f"### Needs Work (Development)\n\n"
              for name, data in needs_work:
                  coverage = data.get("coverage", {}).get("coverage", 0)
                  gap = 70.0 - coverage if coverage < 70 else 0
                  blocker_count = data.get("blocker_count", 0)

                  if gap > 0:
                      report += f"- ⚠️ **{name}** ({coverage:.1f}% coverage, {gap:.1f}% gap, {blocker_count} blockers)\n"
                  else:
                      report += f"- ⚠️ **{name}** ({coverage:.1f}% coverage, {blocker_count} blockers)\n"
              report += f"\n"

          # Save report
          with open("component-status-report.md", "w") as f:
              f.write(report)

          print(report)

          # Set output for GitHub Actions
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"total_components={total_components}\n")
              f.write(f"in_production={in_production}\n")
              f.write(f"in_staging={in_staging}\n")
              f.write(f"in_development={in_development}\n")
              f.write(f"ready_for_staging={ready_for_staging}\n")
              f.write(f"ready_for_production={ready_for_production}\n")
              f.write(f"avg_coverage={avg_coverage:.1f}\n")
          EOF

      - name: Upload status report
        uses: actions/upload-artifact@v4
        with:
          name: component-status-report
          path: component-status-report.md

      - name: Post summary to workflow
        run: |
          cat component-status-report.md >> $GITHUB_STEP_SUMMARY

      - name: Create or update status issue
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('component-status-report.md', 'utf8');

            // Search for existing status issue
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'component-status-report',
              state: 'open'
            });

            const issueBody = report + '\n\n---\n\n*This report is automatically generated daily. Last updated: ' + new Date().toISOString() + '*';

            if (issues.data.length > 0) {
              // Update existing issue
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issues.data[0].number,
                body: issueBody
              });

              console.log(`Updated existing status issue #${issues.data[0].number}`);
            } else {
              // Create new issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: '📊 Component Status Report',
                body: issueBody,
                labels: ['component-status-report', 'documentation']
              });

              console.log('Created new status issue');
            }
