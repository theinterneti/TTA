name: Mutation Testing

on:
  # Weekly schedule: Sunday at 2 AM UTC
  schedule:
    - cron: '0 2 * * 0'

  # Allow manual triggering for testing
  workflow_dispatch:
    inputs:
      service:
        description: 'Service to test (all, model-selector, fallback-handler, performance-monitor)'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - model-selector
          - fallback-handler
          - performance-monitor

env:
  PYTHON_VERSION: '3.12'
  MUTATION_SCORE_THRESHOLD: 85

jobs:
  mutation-test-model-selector:
    name: Mutation Test - ModelSelector
    runs-on: ubuntu-latest
    timeout-minutes: 60
    if: github.event_name == 'schedule' || github.event.inputs.service == 'all' || github.event.inputs.service == 'model-selector'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v1

      - name: Cache uv dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: ${{ runner.os }}-uv-mutation-${{ hashFiles('**/pyproject.toml', '**/uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-mutation-
            ${{ runner.os }}-uv-

      - name: Install dependencies
        run: |
          uv sync --all-extras
          uv add --dev cosmic-ray

      - name: Run mutation testing - ModelSelector
        id: mutation-test
        run: |
          echo "Starting mutation testing for ModelSelector..."

          # Create configuration file
          cat > cosmic-ray-model-selector.toml << EOF
          [cosmic-ray]
          module-path = "src/components/model_management/services/model_selector.py"
          timeout = 10.0
          excluded-modules = []
          test-command = "uv run pytest tests/unit/model_management/services/test_model_selector_properties.py tests/unit/model_management/services/test_model_selector_concrete.py -x -q --tb=no -p no:warnings"

          [cosmic-ray.distributor]
          name = "local"
          EOF

          # Initialize and execute
          uv run cosmic-ray init cosmic-ray-model-selector.toml session-model-selector.sqlite
          uv run cosmic-ray exec cosmic-ray-model-selector.toml session-model-selector.sqlite

          # Generate reports
          uv run cr-report session-model-selector.sqlite > model-selector-report.txt
          uv run cr-html session-model-selector.sqlite > model-selector-report.html

          # Extract mutation score
          SCORE=$(uv run cr-report session-model-selector.sqlite | grep -oP 'surviving mutants: \d+ \(\K[0-9.]+' | head -1)
          KILLED_PERCENT=$(echo "100 - $SCORE" | bc)
          echo "mutation_score=$KILLED_PERCENT" >> $GITHUB_OUTPUT

          echo "Mutation Score: $KILLED_PERCENT%"

      - name: Check mutation score threshold
        run: |
          SCORE=${{ steps.mutation-test.outputs.mutation_score }}
          THRESHOLD=${{ env.MUTATION_SCORE_THRESHOLD }}

          echo "Mutation Score: $SCORE%"
          echo "Threshold: $THRESHOLD%"

          if (( $(echo "$SCORE < $THRESHOLD" | bc -l) )); then
            echo "❌ Mutation score $SCORE% is below threshold $THRESHOLD%"
            exit 1
          else
            echo "✅ Mutation score $SCORE% meets threshold $THRESHOLD%"
          fi

      - name: Upload mutation reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mutation-report-model-selector
          path: |
            model-selector-report.txt
            model-selector-report.html
            session-model-selector.sqlite
          retention-days: 30

  mutation-test-fallback-handler:
    name: Mutation Test - FallbackHandler
    runs-on: ubuntu-latest
    timeout-minutes: 60
    if: github.event_name == 'schedule' || github.event.inputs.service == 'all' || github.event.inputs.service == 'fallback-handler'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v1

      - name: Cache uv dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: ${{ runner.os }}-uv-mutation-${{ hashFiles('**/pyproject.toml', '**/uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-mutation-
            ${{ runner.os }}-uv-

      - name: Install dependencies
        run: |
          uv sync --all-extras
          uv add --dev cosmic-ray

      - name: Run mutation testing - FallbackHandler
        id: mutation-test
        run: |
          echo "Starting mutation testing for FallbackHandler..."

          # Create configuration file
          cat > cosmic-ray-fallback.toml << EOF
          [cosmic-ray]
          module-path = "src/components/model_management/services/fallback_handler.py"
          timeout = 10.0
          excluded-modules = []
          test-command = "uv run pytest tests/unit/model_management/services/test_fallback_handler_properties.py tests/unit/model_management/services/test_fallback_handler_concrete.py -x -q --tb=no -p no:warnings"

          [cosmic-ray.distributor]
          name = "local"
          EOF

          # Initialize and execute
          uv run cosmic-ray init cosmic-ray-fallback.toml session-fallback.sqlite
          uv run cosmic-ray exec cosmic-ray-fallback.toml session-fallback.sqlite

          # Generate reports
          uv run cr-report session-fallback.sqlite > fallback-handler-report.txt
          uv run cr-html session-fallback.sqlite > fallback-handler-report.html

          # Extract mutation score
          SCORE=$(uv run cr-report session-fallback.sqlite | grep -oP 'surviving mutants: \d+ \(\K[0-9.]+' | head -1)
          KILLED_PERCENT=$(echo "100 - $SCORE" | bc)
          echo "mutation_score=$KILLED_PERCENT" >> $GITHUB_OUTPUT

          echo "Mutation Score: $KILLED_PERCENT%"

      - name: Check mutation score threshold
        run: |
          SCORE=${{ steps.mutation-test.outputs.mutation_score }}
          THRESHOLD=${{ env.MUTATION_SCORE_THRESHOLD }}

          echo "Mutation Score: $SCORE%"
          echo "Threshold: $THRESHOLD%"

          if (( $(echo "$SCORE < $THRESHOLD" | bc -l) )); then
            echo "❌ Mutation score $SCORE% is below threshold $THRESHOLD%"
            exit 1
          else
            echo "✅ Mutation score $SCORE% meets threshold $THRESHOLD%"
          fi

      - name: Upload mutation reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mutation-report-fallback-handler
          path: |
            fallback-handler-report.txt
            fallback-handler-report.html
            session-fallback.sqlite
          retention-days: 30

  mutation-test-performance-monitor:
    name: Mutation Test - PerformanceMonitor
    runs-on: ubuntu-latest
    timeout-minutes: 60
    if: github.event_name == 'schedule' || github.event.inputs.service == 'all' || github.event.inputs.service == 'performance-monitor'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v1

      - name: Cache uv dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: ${{ runner.os }}-uv-mutation-${{ hashFiles('**/pyproject.toml', '**/uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-mutation-
            ${{ runner.os }}-uv-

      - name: Install dependencies
        run: |
          uv sync --all-extras
          uv add --dev cosmic-ray

      - name: Run mutation testing - PerformanceMonitor
        id: mutation-test
        run: |
          echo "Starting mutation testing for PerformanceMonitor..."

          # Create configuration file
          cat > cosmic-ray-performance.toml << EOF
          [cosmic-ray]
          module-path = "src/components/model_management/services/performance_monitor.py"
          timeout = 10.0
          excluded-modules = []
          test-command = "uv run pytest tests/unit/model_management/services/test_performance_monitor_properties.py tests/unit/model_management/services/test_performance_monitor_concrete.py -x -q --tb=no -p no:warnings"

          [cosmic-ray.distributor]
          name = "local"
          EOF

          # Initialize and execute
          uv run cosmic-ray init cosmic-ray-performance.toml session-performance.sqlite
          uv run cosmic-ray exec cosmic-ray-performance.toml session-performance.sqlite

          # Generate reports
          uv run cr-report session-performance.sqlite > performance-monitor-report.txt
          uv run cr-html session-performance.sqlite > performance-monitor-report.html

          # Extract mutation score
          SCORE=$(uv run cr-report session-performance.sqlite | grep -oP 'surviving mutants: \d+ \(\K[0-9.]+' | head -1)
          KILLED_PERCENT=$(echo "100 - $SCORE" | bc)
          echo "mutation_score=$KILLED_PERCENT" >> $GITHUB_OUTPUT

          echo "Mutation Score: $KILLED_PERCENT%"

      - name: Check mutation score threshold
        run: |
          SCORE=${{ steps.mutation-test.outputs.mutation_score }}
          THRESHOLD=${{ env.MUTATION_SCORE_THRESHOLD }}

          echo "Mutation Score: $SCORE%"
          echo "Threshold: $THRESHOLD%"

          if (( $(echo "$SCORE < $THRESHOLD" | bc -l) )); then
            echo "❌ Mutation score $SCORE% is below threshold $THRESHOLD%"
            exit 1
          else
            echo "✅ Mutation score $SCORE% meets threshold $THRESHOLD%"
          fi

      - name: Upload mutation reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mutation-report-performance-monitor
          path: |
            performance-monitor-report.txt
            performance-monitor-report.html
            session-performance.sqlite
          retention-days: 30

  summary:
    name: Mutation Testing Summary
    runs-on: ubuntu-latest
    needs: [mutation-test-model-selector, mutation-test-fallback-handler, mutation-test-performance-monitor]
    if: always()

    steps:
      - name: Generate summary
        run: |
          echo "# Mutation Testing Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Service | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| ModelSelector | ${{ needs.mutation-test-model-selector.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| FallbackHandler | ${{ needs.mutation-test-fallback-handler.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| PerformanceMonitor | ${{ needs.mutation-test-performance-monitor.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Mutation reports have been uploaded as artifacts and are available for 30 days." >> $GITHUB_STEP_SUMMARY
