name: Component Promotion Validation

on:
  issues:
    types: [opened, edited, labeled]
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to validate'
        required: true
        type: number

permissions:
  issues: write
  contents: read

jobs:
  validate-promotion:
    name: Validate Component Promotion Request
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'promotion:requested')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install UV
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Parse promotion request
        id: parse
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const body = issue.body || '';

            // Extract component name
            const componentMatch = body.match(/### Component Name\s+([^\n]+)/);
            const component = componentMatch ? componentMatch[1].trim() : null;

            // Extract current stage
            const currentStageMatch = body.match(/### Current Stage\s+([^\n]+)/);
            const currentStage = currentStageMatch ? currentStageMatch[1].trim() : null;

            // Extract target stage
            const targetStageMatch = body.match(/### Target Stage\s+([^\n]+)/);
            const targetStage = targetStageMatch ? targetStageMatch[1].trim() : null;

            core.setOutput('component', component);
            core.setOutput('current_stage', currentStage);
            core.setOutput('target_stage', targetStage);

            console.log(`Component: ${component}`);
            console.log(`Current Stage: ${currentStage}`);
            console.log(`Target Stage: ${targetStage}`);

      - name: Determine component path
        id: component_path
        run: |
          COMPONENT="${{ steps.parse.outputs.component }}"

          # Map component names to paths
          case "$COMPONENT" in
            "Neo4j")
              echo "path=src/components/neo4j_component.py" >> $GITHUB_OUTPUT
              echo "test_path=tests/test_neo4j_component.py" >> $GITHUB_OUTPUT
              ;;
            "Docker")
              echo "path=src/components/docker_component.py" >> $GITHUB_OUTPUT
              echo "test_path=tests/test_docker_component.py" >> $GITHUB_OUTPUT
              ;;
            "Model Management")
              echo "path=src/components/model_management/" >> $GITHUB_OUTPUT
              echo "test_path=tests/test_model_management.py" >> $GITHUB_OUTPUT
              ;;
            "LLM")
              echo "path=src/components/llm_component.py" >> $GITHUB_OUTPUT
              echo "test_path=tests/test_llm_component.py" >> $GITHUB_OUTPUT
              ;;
            "Agent Orchestration")
              echo "path=src/components/agent_orchestration_component.py" >> $GITHUB_OUTPUT
              echo "test_path=tests/test_agent_orchestration.py" >> $GITHUB_OUTPUT
              ;;
            "Narrative Arc Orchestrator")
              echo "path=src/components/narrative_arc_orchestrator/" >> $GITHUB_OUTPUT
              echo "test_path=tests/test_narrative_arc_orchestrator.py" >> $GITHUB_OUTPUT
              ;;
            "Gameplay Loop")
              echo "path=src/components/gameplay_loop/" >> $GITHUB_OUTPUT
              echo "test_path=tests/test_gameplay_loop.py" >> $GITHUB_OUTPUT
              ;;
            "Character Arc Manager")
              echo "path=src/components/character_arc_manager.py" >> $GITHUB_OUTPUT
              echo "test_path=tests/test_character_arc_manager.py" >> $GITHUB_OUTPUT
              ;;
            "Player Experience")
              echo "path=src/components/player_experience_component.py" >> $GITHUB_OUTPUT
              echo "test_path=tests/test_player_experience.py" >> $GITHUB_OUTPUT
              ;;
            "Narrative Coherence")
              echo "path=src/components/narrative_coherence/" >> $GITHUB_OUTPUT
              echo "test_path=tests/test_narrative_coherence.py" >> $GITHUB_OUTPUT
              ;;
            "Therapeutic Systems")
              echo "path=src/components/therapeutic_systems_enhanced/" >> $GITHUB_OUTPUT
              echo "test_path=tests/test_therapeutic_systems.py" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "Unknown component: $COMPONENT"
              exit 1
              ;;
          esac

      - name: Run unit tests
        id: unit_tests
        run: |
          echo "Running unit tests for ${{ steps.parse.outputs.component }}..."

          # Run tests with coverage
          if [ -f "${{ steps.component_path.outputs.test_path }}" ]; then
            uvx pytest ${{ steps.component_path.outputs.test_path }} \
              --cov=${{ steps.component_path.outputs.path }} \
              --cov-report=term \
              --cov-report=json \
              -v || echo "test_failed=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Test file not found: ${{ steps.component_path.outputs.test_path }}"
            echo "test_failed=true" >> $GITHUB_OUTPUT
          fi

      - name: Check test coverage
        id: coverage
        run: |
          if [ -f coverage.json ]; then
            COVERAGE=$(python -c "import json; data=json.load(open('coverage.json')); print(data['totals']['percent_covered'])")
            echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
            echo "Test coverage: $COVERAGE%"
          else
            echo "coverage=0" >> $GITHUB_OUTPUT
            echo "⚠️ No coverage data available"
          fi

      - name: Run code quality checks
        id: quality
        run: |
          echo "Running code quality checks..."

          # Linting
          uvx ruff check ${{ steps.component_path.outputs.path }} || echo "lint_failed=true" >> $GITHUB_OUTPUT

          # Type checking
          uvx pyright ${{ steps.component_path.outputs.path }} || echo "type_failed=true" >> $GITHUB_OUTPUT

          # Security scan
          uvx bandit -r ${{ steps.component_path.outputs.path }} -ll || echo "security_failed=true" >> $GITHUB_OUTPUT

      - name: Validate promotion criteria
        id: validate
        uses: actions/github-script@v7
        with:
          script: |
            const targetStage = '${{ steps.parse.outputs.target_stage }}';
            const coverage = parseFloat('${{ steps.coverage.outputs.coverage }}');
            const testFailed = '${{ steps.unit_tests.outputs.test_failed }}' === 'true';
            const lintFailed = '${{ steps.quality.outputs.lint_failed }}' === 'true';
            const typeFailed = '${{ steps.quality.outputs.type_failed }}' === 'true';
            const securityFailed = '${{ steps.quality.outputs.security_failed }}' === 'true';

            let passed = true;
            let failures = [];

            if (targetStage === 'Staging') {
              // Development → Staging criteria
              if (coverage < 70) {
                passed = false;
                failures.push(`❌ Test coverage (${coverage.toFixed(1)}%) below 70% threshold`);
              }
              if (testFailed) {
                passed = false;
                failures.push('❌ Unit tests failing');
              }
              if (lintFailed) {
                passed = false;
                failures.push('❌ Linting checks failing');
              }
              if (typeFailed) {
                passed = false;
                failures.push('❌ Type checking failing');
              }
              if (securityFailed) {
                passed = false;
                failures.push('❌ Security scan found issues');
              }
            } else if (targetStage === 'Production') {
              // Staging → Production criteria
              if (coverage < 80) {
                passed = false;
                failures.push(`❌ Test coverage (${coverage.toFixed(1)}%) below 80% threshold`);
              }
              if (testFailed) {
                passed = false;
                failures.push('❌ Integration tests failing');
              }
              // Additional production criteria would go here
            }

            core.setOutput('passed', passed);
            core.setOutput('failures', failures.join('\n'));

            return { passed, failures };

      - name: Post validation results
        uses: actions/github-script@v7
        with:
          script: |
            const passed = '${{ steps.validate.outputs.passed }}' === 'true';
            const failures = `${{ steps.validate.outputs.failures }}`;
            const coverage = '${{ steps.coverage.outputs.coverage }}';
            const component = '${{ steps.parse.outputs.component }}';
            const targetStage = '${{ steps.parse.outputs.target_stage }}';

            let comment = `## 🤖 Automated Promotion Validation\n\n`;
            comment += `**Component**: ${component}\n`;
            comment += `**Target Stage**: ${targetStage}\n`;
            comment += `**Test Coverage**: ${coverage}%\n\n`;

            if (passed) {
              comment += `### ✅ Validation Passed\n\n`;
              comment += `All automated checks passed. The component meets the criteria for promotion to ${targetStage}.\n\n`;
              comment += `**Next Steps**:\n`;
              comment += `1. Manual review of promotion request\n`;
              comment += `2. Verify all criteria in the checklist\n`;
              comment += `3. Add \`promotion:approved\` label when ready\n`;
            } else {
              comment += `### ❌ Validation Failed\n\n`;
              comment += `The following issues were found:\n\n`;
              comment += failures + '\n\n';
              comment += `**Next Steps**:\n`;
              comment += `1. Address the issues listed above\n`;
              comment += `2. Update the promotion request\n`;
              comment += `3. Re-run validation\n`;
            }

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });

      - name: Update labels
        uses: actions/github-script@v7
        with:
          script: |
            const passed = '${{ steps.validate.outputs.passed }}' === 'true';

            if (passed) {
              // Add in-review label
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: ['promotion:in-review']
              });

              // Remove requested label
              try {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  name: 'promotion:requested'
                });
              } catch (error) {
                // Label might not exist
              }
            } else {
              // Add blocked label
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: ['promotion:blocked']
              });
            }
