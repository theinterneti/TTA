name: E2E Staging - Advanced Testing

on:
  pull_request:
    branches: [main, staging]
    paths:
      - 'tests/e2e-staging/**'
      - 'src/player_experience/**'
      - '.github/workflows/e2e-staging-advanced.yml'
  push:
    branches: [staging, main]
    paths:
      - 'tests/e2e-staging/**'
      - 'src/player_experience/**'
  schedule:
    # Nightly comprehensive tests at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: true
        default: 'comprehensive'
        type: choice
        options:
          - quick
          - comprehensive
          - load-testing
          - chaos-engineering
          - security
          - visual-regression
          - all

env:
  NODE_VERSION: '18'
  STAGING_BASE_URL: http://localhost:3001
  STAGING_API_URL: http://localhost:8081
  REDIS_URL: redis://localhost:6380
  NEO4J_URI: bolt://localhost:7688
  DATABASE_URL: postgresql://localhost:5433/tta_staging
  USE_MOCK_OAUTH: 'true'
  CI: 'true'

jobs:
  setup:
    name: Setup Test Environment
    runs-on: ubuntu-latest
    outputs:
      test_type: ${{ steps.set-test-type.outputs.test_type }}
    steps:
      - name: Determine test type
        id: set-test-type
        run: |
          if [ "${{ github.event_name }}" == "schedule" ]; then
            echo "test_type=comprehensive" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "test_type=${{ github.event.inputs.test_type }}" >> $GITHUB_OUTPUT
          else
            echo "test_type=quick" >> $GITHUB_OUTPUT
          fi

  core-e2e-tests:
    name: Core E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: setup
    if: |
      needs.setup.outputs.test_type == 'quick' ||
      needs.setup.outputs.test_type == 'comprehensive' ||
      needs.setup.outputs.test_type == 'all'

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6380:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      neo4j:
        image: neo4j:5.13.0
        ports:
          - 7688:7687
        env:
          NEO4J_AUTH: neo4j/password
        options: >-
          --health-cmd "cypher-shell -u neo4j -p password 'RETURN 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium firefox webkit

      - name: Run core E2E tests
        run: npm run test:staging:all-comprehensive

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: test-results-staging/
          retention-days: 30

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-staging-report/
          retention-days: 30

  load-testing:
    name: Load Testing
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: setup
    if: |
      needs.setup.outputs.test_type == 'load-testing' ||
      needs.setup.outputs.test_type == 'comprehensive' ||
      needs.setup.outputs.test_type == 'all'

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6380:6379
      neo4j:
        image: neo4j:5.13.0
        ports:
          - 7688:7687
        env:
          NEO4J_AUTH: neo4j/password

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Run load tests
        run: npm run test:staging:load

      - name: Upload load test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: load-test-results
          path: test-results-staging/load-tests/
          retention-days: 30

  performance-tracking:
    name: Performance Tracking
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [core-e2e-tests]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          name: e2e-test-results
          path: test-results-staging/

      - name: Process performance metrics
        run: |
          node scripts/process-performance-metrics.js

      - name: Store performance baseline
        uses: actions/upload-artifact@v4
        with:
          name: performance-baseline
          path: performance-baseline.json
          retention-days: 90

      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const results = JSON.parse(fs.readFileSync('test-results-staging/results.json', 'utf8'));
            const passed = results.stats.expected;
            const failed = results.stats.unexpected;
            
            const comment = `## E2E Test Results
            
            ✅ Passed: ${passed}
            ❌ Failed: ${failed}
            
            [View detailed report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  slack-notification:
    name: Slack Notification
    runs-on: ubuntu-latest
    needs: [core-e2e-tests]
    if: always() && secrets.SLACK_WEBHOOK_URL != ''

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          name: e2e-test-results
          path: test-results-staging/

      - name: Send Slack notification
        run: |
          node scripts/send-slack-notification.js
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          TEST_RESULTS_PATH: test-results-staging/results.json
          GITHUB_RUN_ID: ${{ github.run_id }}
          GITHUB_REPOSITORY: ${{ github.repository }}

