name: E2E Tests

on:
  push:
    branches:
      - main
      - staging
      - development
      - integration/*
      - feat/production-deployment-infrastructure
  pull_request:
    branches:
      - main
      - staging
      - development
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - auth
          - dashboard
          - character-management
          - chat
          - settings
          - accessibility
          - responsive
      browser:
        description: 'Browser to test'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - chromium
          - firefox
          - webkit

env:
  NODE_VERSION: '18'
  PLAYWRIGHT_BASE_URL: http://localhost:3000
  MOCK_API_URL: http://localhost:8000
  CI: true
  # Test credentials from repository variables/secrets
  TEST_USERNAME: ${{ vars.TEST_USERNAME }}
  TEST_EMAIL: ${{ vars.TEST_EMAIL }}
  PREMIUM_TEST_USERNAME: ${{ vars.PREMIUM_TEST_USERNAME }}
  PREMIUM_TEST_EMAIL: ${{ vars.PREMIUM_TEST_EMAIL }}
  # Performance budgets from repository variables
  PERFORMANCE_BUDGET_AUTH_LOAD_TIME: ${{ vars.PERFORMANCE_BUDGET_AUTH_LOAD_TIME }}
  PERFORMANCE_BUDGET_DASHBOARD_LOAD_TIME: ${{ vars.PERFORMANCE_BUDGET_DASHBOARD_LOAD_TIME }}
  PERFORMANCE_BUDGET_CHAT_RESPONSE_TIME: ${{ vars.PERFORMANCE_BUDGET_CHAT_RESPONSE_TIME }}
  # Feature flags from repository variables
  ENABLE_VISUAL_REGRESSION_TESTS: ${{ vars.ENABLE_VISUAL_REGRESSION_TESTS }}
  ENABLE_PERFORMANCE_BUDGETS: ${{ vars.ENABLE_PERFORMANCE_BUDGETS }}
  ENABLE_SECURITY_SCANNING: ${{ vars.ENABLE_SECURITY_SCANNING }}

jobs:
  e2e-tests:
    name: E2E Tests (${{ matrix.browser }} - ${{ matrix.test-suite }})
    runs-on: ubuntu-latest
    timeout-minutes: 45
    # Skip E2E tests on development branch (unit tests only)
    if: github.ref != 'refs/heads/development'

    strategy:
      fail-fast: false
      matrix:
        # Branch-specific test suites
        # Development: Skip (unit tests only)
        # Staging: Core flows only (auth, dashboard)
        # Main: Full test suite
        browser: ${{ github.ref == 'refs/heads/staging' && fromJSON('["chromium"]') || fromJSON('["chromium", "firefox", "webkit"]') }}
        test-suite: ${{ github.ref == 'refs/heads/staging' && fromJSON('["auth", "dashboard"]') || fromJSON('["auth", "dashboard", "character-management", "chat", "settings", "accessibility", "responsive"]') }}
        exclude:
          # Reduce matrix size for faster CI - run accessibility and responsive only on chromium
          - browser: firefox
            test-suite: accessibility
          - browser: webkit
            test-suite: accessibility
          - browser: firefox
            test-suite: responsive
          - browser: webkit
            test-suite: responsive

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            src/player_experience/frontend/package-lock.json
            tests/e2e/mocks/package-lock.json

      - name: Install root dependencies
        run: npm ci

      - name: Install frontend dependencies
        run: |
          cd src/player_experience/frontend
          npm ci

      - name: Install mock server dependencies
        run: |
          cd tests/e2e/mocks
          npm install

      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Start mock API server
        run: |
          cd tests/e2e/mocks
          npm start &
          echo $! > /tmp/mock-api.pid

      - name: Wait for mock API
        run: |
          timeout 30 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'

      - name: Build frontend
        run: |
          cd src/player_experience/frontend
          export REACT_APP_API_BASE_URL=http://localhost:8000
          export REACT_APP_WS_URL=ws://localhost:8000
          npm run build

      - name: Start frontend server
        run: |
          cd src/player_experience/frontend
          export REACT_APP_API_BASE_URL=http://localhost:8000
          export REACT_APP_WS_URL=ws://localhost:8000
          npm start &
          echo $! > /tmp/frontend.pid

      - name: Wait for frontend
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'

      - name: Run E2E tests
        run: |
          npx playwright test tests/e2e/specs/${{ matrix.test-suite }}.spec.ts --project=${{ matrix.browser }} --reporter=html,json,junit
        env:
          PLAYWRIGHT_BASE_URL: ${{ env.PLAYWRIGHT_BASE_URL }}
          PLAYWRIGHT_HTML_REPORT: playwright-report-${{ matrix.browser }}-${{ matrix.test-suite }}

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.browser }}-${{ matrix.test-suite }}
          path: |
            test-results/
            playwright-report-${{ matrix.browser }}-${{ matrix.test-suite }}/
          retention-days: 30

      - name: Upload failure artifacts
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: failure-artifacts-${{ matrix.browser }}-${{ matrix.test-suite }}
          path: |
            test-results/screenshots/
            test-results/videos/
            test-results/traces/
          retention-days: 7

      - name: Cleanup processes
        if: always()
        run: |
          # Stop frontend and mock API
          [ -f /tmp/frontend.pid ] && kill $(cat /tmp/frontend.pid) || true
          [ -f /tmp/mock-api.pid ] && kill $(cat /tmp/mock-api.pid) || true

  mobile-tests:
    name: Mobile E2E Tests (${{ matrix.device }} - ${{ matrix.test-suite }})
    runs-on: ubuntu-latest
    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        device: ["Mobile Chrome", "Mobile Safari"]
        test-suite: [auth, dashboard, character-management, chat, responsive]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            src/player_experience/frontend/package-lock.json
            tests/e2e/mocks/package-lock.json

      - name: Install dependencies
        run: |
          npm ci
          cd src/player_experience/frontend
          npm ci
          cd ../../tests/e2e/mocks
          npm install

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium webkit

      - name: Start mock API server
        run: |
          cd tests/e2e/mocks
          npm start &
          echo $! > /tmp/mock-api.pid

      - name: Wait for mock API
        run: |
          timeout 30 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'

      - name: Build and start frontend
        run: |
          cd src/player_experience/frontend
          export REACT_APP_API_BASE_URL=http://localhost:8000
          export REACT_APP_WS_URL=ws://localhost:8000
          npm run build
          npm start &
          echo $! > /tmp/frontend.pid
          timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'

      - name: Run mobile E2E tests
        run: |
          npx playwright test tests/e2e/specs/${{ matrix.test-suite }}.spec.ts --project="${{ matrix.device }}" --reporter=html,json
        env:
          PLAYWRIGHT_BASE_URL: ${{ env.PLAYWRIGHT_BASE_URL }}

      - name: Upload mobile test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mobile-results-${{ matrix.device }}-${{ matrix.test-suite }}
          path: |
            test-results/
            playwright-report/
          retention-days: 30

      - name: Cleanup mobile processes
        if: always()
        run: |
          [ -f /tmp/frontend.pid ] && kill $(cat /tmp/frontend.pid) || true
          [ -f /tmp/mock-api.pid ] && kill $(cat /tmp/mock-api.pid) || true

  accessibility-audit:
    name: Comprehensive Accessibility Audit
    runs-on: ubuntu-latest
    timeout-minutes: 25

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            src/player_experience/frontend/package-lock.json
            tests/e2e/mocks/package-lock.json

      - name: Install dependencies
        run: |
          npm ci
          cd src/player_experience/frontend
          npm ci
          cd ../../tests/e2e/mocks
          npm install

      - name: Install Playwright and accessibility tools
        run: |
          npx playwright install --with-deps chromium
          npm install @axe-core/playwright

      - name: Start test environment
        run: |
          cd tests/e2e/mocks
          npm start &
          echo $! > /tmp/mock-api.pid
          timeout 30 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'

          cd ../../../src/player_experience/frontend
          export REACT_APP_API_BASE_URL=http://localhost:8000
          export REACT_APP_WS_URL=ws://localhost:8000
          npm run build
          npm start &
          echo $! > /tmp/frontend.pid
          timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'

      - name: Run comprehensive accessibility tests
        run: |
          npx playwright test tests/e2e/specs/accessibility.spec.ts --project=chromium --reporter=html,json
        env:
          PLAYWRIGHT_BASE_URL: ${{ env.PLAYWRIGHT_BASE_URL }}

      - name: Upload accessibility results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-audit-results
          path: |
            test-results/
            playwright-report/
          retention-days: 30

      - name: Cleanup accessibility processes
        if: always()
        run: |
          [ -f /tmp/frontend.pid ] && kill $(cat /tmp/frontend.pid) || true
          [ -f /tmp/mock-api.pid ] && kill $(cat /tmp/mock-api.pid) || true

  performance-tests:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            src/player_experience/frontend/package-lock.json
            tests/e2e/mocks/package-lock.json

      - name: Install dependencies
        run: |
          npm ci
          cd src/player_experience/frontend
          npm ci
          cd ../../tests/e2e/mocks
          npm install

      - name: Install Playwright
        run: npx playwright install --with-deps chromium

      - name: Start optimized test environment
        run: |
          cd tests/e2e/mocks
          npm start &
          echo $! > /tmp/mock-api.pid
          timeout 30 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'

          cd ../../../src/player_experience/frontend
          export REACT_APP_API_BASE_URL=http://localhost:8000
          export REACT_APP_WS_URL=ws://localhost:8000
          npm run build
          npm start &
          echo $! > /tmp/frontend.pid
          timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'

      - name: Run performance benchmarks
        run: |
          npx playwright test tests/e2e/specs/auth.spec.ts tests/e2e/specs/dashboard.spec.ts tests/e2e/specs/chat.spec.ts --project=chromium --grep="Performance|performance|load time" --reporter=html,json
        env:
          PLAYWRIGHT_BASE_URL: ${{ env.PLAYWRIGHT_BASE_URL }}

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-benchmark-results
          path: |
            test-results/
            playwright-report/
          retention-days: 30

      - name: Cleanup performance processes
        if: always()
        run: |
          [ -f /tmp/frontend.pid ] && kill $(cat /tmp/frontend.pid) || true
          [ -f /tmp/mock-api.pid ] && kill $(cat /tmp/mock-api.pid) || true

  visual-regression:
    name: Visual Regression Testing
    runs-on: ubuntu-latest
    timeout-minutes: 25
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            src/player_experience/frontend/package-lock.json
            tests/e2e/mocks/package-lock.json

      - name: Install dependencies
        run: |
          npm ci
          cd src/player_experience/frontend
          npm ci
          cd ../../tests/e2e/mocks
          npm install

      - name: Install Playwright
        run: npx playwright install --with-deps chromium

      - name: Start consistent test environment
        run: |
          cd tests/e2e/mocks
          npm start &
          echo $! > /tmp/mock-api.pid
          timeout 30 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'

          cd ../../../src/player_experience/frontend
          export REACT_APP_API_BASE_URL=http://localhost:8000
          export REACT_APP_WS_URL=ws://localhost:8000
          npm run build
          npm start &
          echo $! > /tmp/frontend.pid
          timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'

      - name: Run visual regression tests
        run: |
          npx playwright test --project=chromium --grep="screenshot|visual" --reporter=html,json
        env:
          PLAYWRIGHT_BASE_URL: ${{ env.PLAYWRIGHT_BASE_URL }}

      - name: Upload visual regression results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: visual-regression-results
          path: |
            test-results/
            playwright-report/
          retention-days: 30

      - name: Cleanup visual regression processes
        if: always()
        run: |
          [ -f /tmp/frontend.pid ] && kill $(cat /tmp/frontend.pid) || true
          [ -f /tmp/mock-api.pid ] && kill $(cat /tmp/mock-api.pid) || true

  test-report:
    name: Generate Consolidated Test Report
    runs-on: ubuntu-latest
    needs: [e2e-tests, mobile-tests, accessibility-audit, performance-tests, visual-regression]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all test artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Playwright for report generation
        run: |
          npm ci
          npx playwright install --with-deps

      - name: Consolidate test results
        run: |
          mkdir -p consolidated-results

          # Find and copy all JSON test results
          find artifacts/ -name "*.json" -path "*/test-results/*" -exec cp {} consolidated-results/ \; || true

          # Create summary report
          echo "# TTA E2E Test Results Summary" > test-summary.md
          echo "" >> test-summary.md
          echo "**Test Run:** ${{ github.run_number }}" >> test-summary.md
          echo "**Branch:** ${{ github.ref_name }}" >> test-summary.md
          echo "**Commit:** ${{ github.sha }}" >> test-summary.md
          echo "**Date:** $(date -u)" >> test-summary.md
          echo "" >> test-summary.md

          # Count artifacts
          TOTAL_ARTIFACTS=$(find artifacts/ -name "test-results-*" -type d | wc -l)
          FAILED_ARTIFACTS=$(find artifacts/ -name "failure-artifacts-*" -type d | wc -l)

          echo "**Total Test Suites:** $TOTAL_ARTIFACTS" >> test-summary.md
          echo "**Failed Test Suites:** $FAILED_ARTIFACTS" >> test-summary.md
          echo "" >> test-summary.md

          if [ $FAILED_ARTIFACTS -gt 0 ]; then
            echo "❌ **Some tests failed. Check individual test reports for details.**" >> test-summary.md
          else
            echo "✅ **All tests passed successfully!**" >> test-summary.md
          fi

      - name: Generate consolidated HTML report
        run: |
          if [ -d "consolidated-results" ] && [ "$(ls -A consolidated-results)" ]; then
            npx playwright merge-reports consolidated-results/ || echo "No reports to merge"
          else
            echo "No test results found to merge"
          fi

      - name: Upload consolidated report
        uses: actions/upload-artifact@v4
        with:
          name: consolidated-test-report
          path: |
            playwright-report/
            test-summary.md
          retention-days: 30

      - name: Deploy report to GitHub Pages
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./playwright-report
          destination_dir: e2e-reports/${{ github.run_number }}

      - name: Comment PR with test results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('test-summary.md')) {
              const summary = fs.readFileSync('test-summary.md', 'utf8');
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            }

  # =============================================================================
  # NOTIFICATION AND DEPLOYMENT JOBS
  # =============================================================================

  notify-results:
    name: Notify Test Results
    runs-on: ubuntu-latest
    needs: [e2e-tests, mobile-tests, accessibility-audit, performance-tests, visual-regression, test-report]
    if: always() && (vars.NOTIFICATION_CHANNELS != '' || vars.CRITICAL_FAILURE_NOTIFICATION == 'true')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine notification status
        id: status
        run: |
          # Check if any critical jobs failed
          if [[ "${{ needs.e2e-tests.result }}" == "failure" || "${{ needs.accessibility-audit.result }}" == "failure" || "${{ needs.performance-tests.result }}" == "failure" ]]; then
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=❌ Critical E2E tests failed" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.e2e-tests.result }}" == "success" && "${{ needs.accessibility-audit.result }}" == "success" && "${{ needs.performance-tests.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=✅ All E2E tests passed successfully" >> $GITHUB_OUTPUT
          else
            echo "status=partial" >> $GITHUB_OUTPUT
            echo "message=⚠️ Some E2E tests completed with issues" >> $GITHUB_OUTPUT
          fi

      - name: Notify Slack
        if: contains(vars.NOTIFICATION_CHANNELS, 'slack') && secrets.SLACK_WEBHOOK_URL != ''
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ steps.status.outputs.status }}
          text: |
            ${{ steps.status.outputs.message }}

            **Branch:** ${{ github.ref_name }}
            **Commit:** ${{ github.sha }}
            **Run:** ${{ github.run_number }}
            **Actor:** ${{ github.actor }}

            [View Results](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Discord
        if: contains(vars.NOTIFICATION_CHANNELS, 'discord') && secrets.DISCORD_WEBHOOK_URL != ''
        uses: Ilshidur/action-discord@master
        with:
          args: |
            ${{ steps.status.outputs.message }}

            **Branch:** ${{ github.ref_name }}
            **Run:** ${{ github.run_number }}
            [View Results](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test-report]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push' && needs.test-report.result == 'success'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd src/player_experience/frontend
          npm ci

      - name: Build for staging
        run: |
          cd src/player_experience/frontend
          export REACT_APP_API_BASE_URL=${{ secrets.API_BASE_URL }}
          export REACT_APP_WS_URL=${{ secrets.WS_URL }}
          export REACT_APP_ENVIRONMENT=staging
          npm run build

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          echo "API URL: ${{ secrets.API_BASE_URL }}"
          echo "Environment: ${{ vars.ENVIRONMENT_NAME }}"
          # Add actual deployment commands here
          # Example: rsync, scp, or cloud provider CLI commands

      - name: Notify staging deployment
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            🚀 Successfully deployed to staging!

            **Branch:** ${{ github.ref_name }}
            **Environment:** staging
            **URL:** ${{ secrets.API_BASE_URL }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
