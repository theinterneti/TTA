# GitHub Branch Protection Rules - Solo Developer Configuration
# TTA Repository - Optimized for single developer workflow
#
# This configuration provides practical protection without blocking solo development
# Updated: 2025-10-01

# =============================================================================
# PHILOSOPHY
# =============================================================================
# Solo developer needs:
# - Protection against accidental force pushes
# - Ensure CI passes before merge
# - Maintain clean git history
# - BUT: No bureaucratic overhead (teams, multiple approvals)

# =============================================================================
# MAIN BRANCH PROTECTION
# =============================================================================
main:
  description: "Production branch - practical protection for solo developer"

  # Status Checks - Only require checks that currently exist
  required_status_checks:
    strict: true  # Require branches to be up to date before merging
    contexts:
      # Core tests (from tests.yml)
      - "unit"
      - "integration"

      # Security (from security-scan.yml) - will be added after workflow fix
      # - "security-scan / Security Scan"

      # Code quality (will be added after code-quality.yml is created)
      # - "code-quality / Lint and Format"
      # - "code-quality / Type Check"

  # Pull Request Reviews - Solo developer friendly
  required_pull_request_reviews:
    required_approving_review_count: 1  # Can self-approve or use auto-merge
    dismiss_stale_reviews: true
    require_code_owner_reviews: false  # No CODEOWNERS required for solo dev
    require_last_push_approval: false  # Allow self-approval
    bypass_pull_request_allowances:
      users: ["theinterneti"]  # Allow bypass for emergencies

  # Additional Restrictions
  restrictions: null  # No push restrictions for solo developer

  # Administrative Settings
  enforce_admins: false  # Allow admin bypass for emergencies
  allow_force_pushes: false  # Prevent accidental history rewriting
  allow_deletions: false  # Prevent accidental branch deletion
  required_linear_history: true  # Keep clean git history
  allow_auto_merge: true  # Enable auto-merge for convenience
  delete_branch_on_merge: true  # Clean up merged branches
  required_conversation_resolution: true  # Ensure all comments addressed
  lock_branch: false  # Don't lock the branch
  allow_fork_syncing: true  # Allow syncing from forks

# =============================================================================
# DEVELOP BRANCH PROTECTION (if used)
# =============================================================================
develop:
  description: "Development integration branch - flexible for experimentation"

  # Status Checks - Minimal for faster iteration
  required_status_checks:
    strict: false  # Allow merging without being up to date
    contexts:
      - "unit"  # Only require unit tests

  # Pull Request Reviews - Optional for develop
  required_pull_request_reviews:
    required_approving_review_count: 0  # No approval required
    dismiss_stale_reviews: false
    require_code_owner_reviews: false
    require_last_push_approval: false

  # Additional Restrictions
  restrictions: null

  # Administrative Settings
  enforce_admins: false
  allow_force_pushes: false  # Still prevent force pushes
  allow_deletions: false
  required_linear_history: false  # Allow merge commits
  allow_auto_merge: true
  delete_branch_on_merge: true
  required_conversation_resolution: false
  lock_branch: false
  allow_fork_syncing: true

# =============================================================================
# FEAT/* BRANCHES (Feature Branches)
# =============================================================================
# Note: Wildcard patterns require GitHub Branch Rulesets (newer feature)
# For now, configure manually via web UI if needed
feat/*:
  description: "Feature branches - minimal protection, allow experimentation"

  # Status Checks - None required for feature branches
  required_status_checks: null

  # Pull Request Reviews - None required
  required_pull_request_reviews: null

  # Additional Restrictions
  restrictions: null

  # Administrative Settings
  enforce_admins: false
  allow_force_pushes: true  # Allow force pushes for rebasing
  allow_deletions: true  # Allow deletion after merge
  required_linear_history: false
  allow_auto_merge: false
  delete_branch_on_merge: true

# =============================================================================
# STAGING BRANCH (if used)
# =============================================================================
staging:
  description: "Staging environment branch - moderate protection"

  # Status Checks
  required_status_checks:
    strict: true
    contexts:
      - "unit"
      - "integration"
      - "e2e-tests / E2E Tests (chromium - auth)"

  # Pull Request Reviews
  required_pull_request_reviews:
    required_approving_review_count: 1
    dismiss_stale_reviews: true
    require_code_owner_reviews: false
    require_last_push_approval: false

  # Additional Restrictions
  restrictions: null

  # Administrative Settings
  enforce_admins: false
  allow_force_pushes: false
  allow_deletions: false
  required_linear_history: true
  allow_auto_merge: true
  delete_branch_on_merge: false  # Keep staging branch

# =============================================================================
# IMPLEMENTATION METHODS
# =============================================================================

# Method 1: Automated Script (Recommended)
# Run the provided script:
#   chmod +x .github/scripts/configure-branch-protection.sh
#   .github/scripts/configure-branch-protection.sh

# Method 2: GitHub CLI (Manual)
# Configure main branch:
#   gh api --method PUT \
#     -H "Accept: application/vnd.github+json" \
#     "/repos/theinterneti/TTA/branches/main/protection" \
#     -f required_status_checks[strict]=true \
#     -f "required_status_checks[contexts][]=unit" \
#     -f "required_status_checks[contexts][]=integration" \
#     -f required_pull_request_reviews[required_approving_review_count]=1 \
#     -f required_pull_request_reviews[dismiss_stale_reviews]=true \
#     -f enforce_admins=false \
#     -f required_linear_history=true \
#     -f allow_force_pushes=false \
#     -f allow_deletions=false

# Method 3: GitHub Web UI
# 1. Go to: https://github.com/theinterneti/TTA/settings/branches
# 2. Click "Add branch protection rule"
# 3. Branch name pattern: main
# 4. Configure settings as specified above
# 5. Click "Create" or "Save changes"

# =============================================================================
# VALIDATION CHECKLIST
# =============================================================================

# After configuration:
# ✓ Verify protection rules in GitHub web UI
# ✓ Test creating a PR to main branch
# ✓ Verify status checks are required
# ✓ Test auto-merge functionality
# ✓ Verify force push is blocked
# ✓ Test admin bypass (if needed)

# =============================================================================
# EVOLUTION PLAN
# =============================================================================

# As workflows are added, update required status checks:
#
# Phase 1 (Current):
#   - unit
#   - integration
#
# Phase 2 (After code-quality.yml):
#   + code-quality / Lint and Format
#   + code-quality / Type Check
#
# Phase 3 (After security fixes):
#   + security-scan / Security Scan
#
# Phase 4 (After docker-build.yml):
#   + docker-build / Build and Validate
#
# Phase 5 (Full protection):
#   + e2e-tests / E2E Tests (chromium - auth)
#   + e2e-tests / E2E Tests (chromium - dashboard)
#   + comprehensive-tests / Core Tests

# =============================================================================
# MAINTENANCE
# =============================================================================

# Regular tasks:
# - Update required status checks as new workflows are added
# - Review protection rules quarterly
# - Adjust based on actual workflow needs
# - Document any exceptions or special cases

# Emergency bypass procedure:
# 1. Use admin privileges to bypass protection
# 2. Document reason in commit message
# 3. Create follow-up issue to address properly
# 4. Review bypass usage monthly
