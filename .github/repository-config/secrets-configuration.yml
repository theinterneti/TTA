# GitHub Repository Secrets Configuration for TTA E2E Testing
# This file documents all required secrets and variables for production deployment

# =============================================================================
# REPOSITORY SECRETS (Settings > Secrets and variables > Actions > Repository secrets)
# =============================================================================

# Deployment & Infrastructure Secrets
STAGING_DEPLOY_KEY:
  description: "SSH private key for staging environment deployment"
  type: "secret"
  required: true
  usage: "Used by deployment workflows to access staging servers"
  example: "-----BEGIN OPENSSH PRIVATE KEY-----\n..."

PRODUCTION_DEPLOY_KEY:
  description: "SSH private key for production environment deployment"
  type: "secret"
  required: true
  usage: "Used by deployment workflows to access production servers"
  example: "-----BEGIN OPENSSH PRIVATE KEY-----\n..."

DOCKER_REGISTRY_TOKEN:
  description: "Token for accessing Docker container registry"
  type: "secret"
  required: false
  usage: "Used for pushing/pulling container images"
  example: "dckr_pat_1234567890abcdef..."

KUBERNETES_CONFIG:
  description: "Base64 encoded Kubernetes config for cluster access"
  type: "secret"
  required: false
  usage: "Used for Kubernetes deployments"
  example: "YXBpVmVyc2lvbjogdjEKY2x1c3RlcnM6..."

# External Service Integration Secrets
OPENROUTER_API_KEY:
  description: "API key for OpenRouter AI model service"
  type: "secret"
  required: true
  usage: "Used for AI model integration in production"
  example: "sk-or-v1-1234567890abcdef..."

NEO4J_CLOUD_PASSWORD:
  description: "Password for Neo4j cloud database"
  type: "secret"
  required: true
  usage: "Production database access"
  example: "complex-secure-password-123"

REDIS_CLOUD_PASSWORD:
  description: "Password for Redis cloud cache"
  type: "secret"
  required: true
  usage: "Production cache access"
  example: "redis-secure-password-456"

SENTRY_DSN:
  description: "Sentry DSN for error monitoring"
  type: "secret"
  required: true
  usage: "Error tracking and monitoring"
  example: "https://1234567890abcdef@o123456.ingest.sentry.io/123456"

DATADOG_API_KEY:
  description: "Datadog API key for performance monitoring"
  type: "secret"
  required: false
  usage: "Performance and infrastructure monitoring"
  example: "1234567890abcdef1234567890abcdef"

# Notification & Communication Secrets
SLACK_WEBHOOK_URL:
  description: "Slack webhook URL for CI/CD notifications"
  type: "secret"
  required: true
  usage: "Send test results and deployment notifications to Slack"
  example: "https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX"

DISCORD_WEBHOOK_URL:
  description: "Discord webhook URL for alternative notifications"
  type: "secret"
  required: false
  usage: "Alternative notification channel"
  example: "https://discord.com/api/webhooks/123456789/abcdef..."

EMAIL_SERVICE_KEY:
  description: "Email service API key for notifications"
  type: "secret"
  required: false
  usage: "Email notifications for critical events"
  example: "SG.1234567890abcdef..."

# Security & Compliance Secrets
SECURITY_SCAN_TOKEN:
  description: "Token for security scanning service"
  type: "secret"
  required: false
  usage: "Automated security vulnerability scanning"
  example: "ghp_1234567890abcdef..."

COMPLIANCE_REPORT_KEY:
  description: "API key for compliance reporting service"
  type: "secret"
  required: false
  usage: "Generate compliance reports"
  example: "comp_1234567890abcdef..."

# Test Environment Secrets
TEST_NEO4J_PASSWORD:
  description: "Password for test Neo4j database"
  type: "secret"
  required: false
  usage: "Integration testing with real database"
  example: "test-neo4j-password-789"

TEST_REDIS_PASSWORD:
  description: "Password for test Redis cache"
  type: "secret"
  required: false
  usage: "Integration testing with real cache"
  example: "test-redis-password-012"

# =============================================================================
# REPOSITORY VARIABLES (Settings > Secrets and variables > Actions > Variables)
# =============================================================================

# Environment URLs
STAGING_API_URL:
  description: "Base URL for staging API"
  type: "variable"
  required: true
  usage: "Frontend configuration for staging environment"
  example: "https://staging-api.tta.example.com"

PRODUCTION_API_URL:
  description: "Base URL for production API"
  type: "variable"
  required: true
  usage: "Frontend configuration for production environment"
  example: "https://api.tta.example.com"

STAGING_WS_URL:
  description: "WebSocket URL for staging environment"
  type: "variable"
  required: true
  usage: "Real-time communication in staging"
  example: "wss://staging-ws.tta.example.com"

PRODUCTION_WS_URL:
  description: "WebSocket URL for production environment"
  type: "variable"
  required: true
  usage: "Real-time communication in production"
  example: "wss://ws.tta.example.com"

# Test Configuration Variables
TEST_USERNAME:
  description: "Username for test user account"
  type: "variable"
  required: true
  usage: "E2E testing authentication"
  example: "e2e_test_user"

TEST_EMAIL:
  description: "Email for test user account"
  type: "variable"
  required: true
  usage: "E2E testing user profile"
  example: "e2e-test@tta.example.com"

PREMIUM_TEST_USERNAME:
  description: "Username for premium test user account"
  type: "variable"
  required: true
  usage: "E2E testing premium features"
  example: "e2e_premium_user"

PREMIUM_TEST_EMAIL:
  description: "Email for premium test user account"
  type: "variable"
  required: true
  usage: "E2E testing premium user profile"
  example: "e2e-premium@tta.example.com"

# Performance Configuration
PERFORMANCE_BUDGET_AUTH_LOAD_TIME:
  description: "Maximum load time for auth pages (ms)"
  type: "variable"
  required: true
  usage: "Performance budget enforcement"
  example: "2000"

PERFORMANCE_BUDGET_DASHBOARD_LOAD_TIME:
  description: "Maximum load time for dashboard (ms)"
  type: "variable"
  required: true
  usage: "Performance budget enforcement"
  example: "3000"

PERFORMANCE_BUDGET_CHAT_RESPONSE_TIME:
  description: "Maximum response time for chat interactions (ms)"
  type: "variable"
  required: true
  usage: "Performance budget enforcement"
  example: "1500"

# Feature Flags
ENABLE_VISUAL_REGRESSION_TESTS:
  description: "Enable visual regression testing"
  type: "variable"
  required: true
  usage: "Control visual regression test execution"
  example: "true"

ENABLE_PERFORMANCE_BUDGETS:
  description: "Enable performance budget enforcement"
  type: "variable"
  required: true
  usage: "Control performance budget checking"
  example: "true"

ENABLE_SECURITY_SCANNING:
  description: "Enable security vulnerability scanning"
  type: "variable"
  required: true
  usage: "Control security scan execution"
  example: "true"

# Notification Configuration
NOTIFICATION_CHANNELS:
  description: "Comma-separated list of notification channels"
  type: "variable"
  required: true
  usage: "Configure which notification channels to use"
  example: "slack,email"

CRITICAL_FAILURE_NOTIFICATION:
  description: "Enable notifications for critical failures"
  type: "variable"
  required: true
  usage: "Control critical failure notifications"
  example: "true"

# =============================================================================
# SETUP INSTRUCTIONS
# =============================================================================

# 1. Repository Secrets Setup:
#    - Go to GitHub repository Settings > Secrets and variables > Actions
#    - Click "New repository secret" for each secret listed above
#    - Use the exact secret names as specified
#    - Enter the appropriate values for your environment

# 2. Repository Variables Setup:
#    - Go to GitHub repository Settings > Secrets and variables > Actions
#    - Click on "Variables" tab
#    - Click "New repository variable" for each variable listed above
#    - Use the exact variable names as specified
#    - Enter the appropriate values for your environment

# 3. Validation:
#    - Run the repository setup validation script: ./scripts/validate-repository-config.sh
#    - Check that all required secrets and variables are configured
#    - Test the workflow with a sample PR to ensure everything works

# =============================================================================
# SECURITY NOTES
# =============================================================================

# - Never commit actual secret values to the repository
# - Use strong, unique passwords for all database connections
# - Rotate secrets regularly (recommended: every 90 days)
# - Use least-privilege access for all service accounts
# - Monitor secret usage through GitHub's audit logs
# - Consider using GitHub's secret scanning to detect accidental commits
